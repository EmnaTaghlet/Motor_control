
code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e14  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08004fac  08004fac  00014fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0001538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005398  08005398  00015398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800539c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  080053a8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080053a8  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c71e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020d0  00000000  00000000  0002c75a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002e830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d29  00000000  00000000  0002ff08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000edf9  00000000  00000000  00047c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096f6f  00000000  00000000  00056a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003224  00000000  00000000  000ed9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f94 	.word	0x08004f94

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004f94 	.word	0x08004f94

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004e2:	463b      	mov	r3, r7
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ee:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f0:	4a21      	ldr	r2, [pc, #132]	; (8000578 <MX_ADC1_Init+0x9c>)
 80004f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004f4:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_ADC1_Init+0x98>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_ADC1_Init+0x98>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000500:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC1_Init+0x98>)
 8000502:	2200      	movs	r2, #0
 8000504:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_ADC1_Init+0x98>)
 8000508:	2200      	movs	r2, #0
 800050a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC1_Init+0x98>)
 800050e:	2200      	movs	r2, #0
 8000510:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC1_Init+0x98>)
 8000516:	2200      	movs	r2, #0
 8000518:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_ADC1_Init+0x98>)
 800051c:	4a17      	ldr	r2, [pc, #92]	; (800057c <MX_ADC1_Init+0xa0>)
 800051e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC1_Init+0x98>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <MX_ADC1_Init+0x98>)
 8000528:	2201      	movs	r2, #1
 800052a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_ADC1_Init+0x98>)
 800052e:	2200      	movs	r2, #0
 8000530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_ADC1_Init+0x98>)
 8000536:	2201      	movs	r2, #1
 8000538:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <MX_ADC1_Init+0x98>)
 800053c:	f001 f894 	bl	8001668 <HAL_ADC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000546:	f000 f9ab 	bl	80008a0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800054a:	2304      	movs	r3, #4
 800054c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800054e:	2301      	movs	r3, #1
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <MX_ADC1_Init+0x98>)
 800055c:	f001 f9cc 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000566:	f000 f99b 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	40012000 	.word	0x40012000
 800057c:	0f000001 	.word	0x0f000001

08000580 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	; 0x28
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_ADC_MspInit+0x7c>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d127      	bne.n	80005f2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b0:	6453      	str	r3, [r2, #68]	; 0x44
 80005b2:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <HAL_ADC_MspInit+0x80>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80005da:	2370      	movs	r3, #112	; 0x70
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005de:	2303      	movs	r3, #3
 80005e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	; (8000604 <HAL_ADC_MspInit+0x84>)
 80005ee:	f001 fdcb 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40012000 	.word	0x40012000
 8000600:	40023800 	.word	0x40023800
 8000604:	40020000 	.word	0x40020000

08000608 <HAL_ADC_ConvCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]

    Ia=((int)adcBuffer[0] << 4);
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <HAL_ADC_ConvCpltCallback+0x70>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800061a:	ee17 3a90 	vmov	r3, s15
 800061e:	011b      	lsls	r3, r3, #4
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000628:	4b14      	ldr	r3, [pc, #80]	; (800067c <HAL_ADC_ConvCpltCallback+0x74>)
 800062a:	edc3 7a00 	vstr	s15, [r3]
    Ib=((int)adcBuffer[1] << 4);
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <HAL_ADC_ConvCpltCallback+0x70>)
 8000630:	edd3 7a01 	vldr	s15, [r3, #4]
 8000634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000638:	ee17 3a90 	vmov	r3, s15
 800063c:	011b      	lsls	r3, r3, #4
 800063e:	ee07 3a90 	vmov	s15, r3
 8000642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <HAL_ADC_ConvCpltCallback+0x78>)
 8000648:	edc3 7a00 	vstr	s15, [r3]
    Ic=((int)adcBuffer[2] << 4);
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <HAL_ADC_ConvCpltCallback+0x70>)
 800064e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000656:	ee17 3a90 	vmov	r3, s15
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	ee07 3a90 	vmov	s15, r3
 8000660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000666:	edc3 7a00 	vstr	s15, [r3]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000084 	.word	0x20000084
 800067c:	20000078 	.word	0x20000078
 8000680:	2000007c 	.word	0x2000007c
 8000684:	20000080 	.word	0x20000080

08000688 <GetPhaseACurrent>:
float GetPhaseACurrent() {
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
    return adcBuffer[0];
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <GetPhaseACurrent+0x18>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	ee07 3a90 	vmov	s15, r3
}
 8000694:	eeb0 0a67 	vmov.f32	s0, s15
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	20000084 	.word	0x20000084

080006a4 <GetPhaseBCurrent>:

float GetPhaseBCurrent() {
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
    return adcBuffer[1];
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <GetPhaseBCurrent+0x18>)
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	ee07 3a90 	vmov	s15, r3
}
 80006b0:	eeb0 0a67 	vmov.f32	s0, s15
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000084 	.word	0x20000084

080006c0 <GetPhaseCCurrent>:

float GetPhaseCCurrent() {
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
    return adcBuffer[2];
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <GetPhaseCCurrent+0x18>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	ee07 3a90 	vmov	s15, r3
}
 80006cc:	eeb0 0a67 	vmov.f32	s0, s15
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	20000084 	.word	0x20000084

080006dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]
 80006e6:	4b25      	ldr	r3, [pc, #148]	; (800077c <MX_GPIO_Init+0xa0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	4a24      	ldr	r2, [pc, #144]	; (800077c <MX_GPIO_Init+0xa0>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6313      	str	r3, [r2, #48]	; 0x30
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_GPIO_Init+0xa0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006fa:	617b      	str	r3, [r7, #20]
 80006fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_GPIO_Init+0xa0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a1d      	ldr	r2, [pc, #116]	; (800077c <MX_GPIO_Init+0xa0>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_GPIO_Init+0xa0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_GPIO_Init+0xa0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <MX_GPIO_Init+0xa0>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_GPIO_Init+0xa0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a0f      	ldr	r2, [pc, #60]	; (800077c <MX_GPIO_Init+0xa0>)
 8000740:	f043 0310 	orr.w	r3, r3, #16
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_GPIO_Init+0xa0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0310 	and.w	r3, r3, #16
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <MX_GPIO_Init+0xa0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_GPIO_Init+0xa0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

}
 800076e:	bf00      	nop
 8000770:	371c      	adds	r7, #28
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fefe 	bl	8001584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f822 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff ffa6 	bl	80006dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000790:	f000 fa44 	bl	8000c1c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000794:	f7ff fea2 	bl	80004dc <MX_ADC1_Init>
  MX_TIM2_Init();
 8000798:	f000 fadc 	bl	8000d54 <MX_TIM2_Init>
  MX_TIM3_Init();
 800079c:	f000 fb2e 	bl	8000dfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, &adcBuffer,3);//current
 80007a0:	2203      	movs	r2, #3
 80007a2:	4907      	ldr	r1, [pc, #28]	; (80007c0 <main+0x40>)
 80007a4:	4807      	ldr	r0, [pc, #28]	; (80007c4 <main+0x44>)
 80007a6:	f000 ffa3 	bl	80016f0 <HAL_ADC_Start_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);//theta
 80007aa:	213c      	movs	r1, #60	; 0x3c
 80007ac:	4806      	ldr	r0, [pc, #24]	; (80007c8 <main+0x48>)
 80007ae:	f002 fd3f 	bl	8003230 <HAL_TIM_Encoder_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);//speed
 80007b2:	2100      	movs	r1, #0
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <main+0x4c>)
 80007b6:	f002 fbc7 	bl	8002f48 <HAL_TIM_IC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  motorcontrol();
 80007ba:	f000 f877 	bl	80008ac <motorcontrol>
 80007be:	e7fc      	b.n	80007ba <main+0x3a>
 80007c0:	20000084 	.word	0x20000084
 80007c4:	20000028 	.word	0x20000028
 80007c8:	20000124 	.word	0x20000124
 80007cc:	2000016c 	.word	0x2000016c

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b094      	sub	sp, #80	; 0x50
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2230      	movs	r2, #48	; 0x30
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f003 fe30 	bl	8004444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	f107 030c 	add.w	r3, r7, #12
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]
 80007ee:	609a      	str	r2, [r3, #8]
 80007f0:	60da      	str	r2, [r3, #12]
 80007f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	4b27      	ldr	r3, [pc, #156]	; (8000898 <SystemClock_Config+0xc8>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	4a26      	ldr	r2, [pc, #152]	; (8000898 <SystemClock_Config+0xc8>)
 80007fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000802:	6413      	str	r3, [r2, #64]	; 0x40
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <SystemClock_Config+0xc8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000810:	2300      	movs	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <SystemClock_Config+0xcc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a20      	ldr	r2, [pc, #128]	; (800089c <SystemClock_Config+0xcc>)
 800081a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <SystemClock_Config+0xcc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082c:	2301      	movs	r3, #1
 800082e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000830:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000834:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000840:	2304      	movs	r3, #4
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000844:	2348      	movs	r3, #72	; 0x48
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800084c:	2308      	movs	r3, #8
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0320 	add.w	r3, r7, #32
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fe1b 	bl	8002490 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000860:	f000 f81e 	bl	80008a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000868:	2302      	movs	r3, #2
 800086a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	2102      	movs	r1, #2
 8000880:	4618      	mov	r0, r3
 8000882:	f002 f87d 	bl	8002980 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800088c:	f000 f808 	bl	80008a0 <Error_Handler>
  }
}
 8000890:	bf00      	nop
 8000892:	3750      	adds	r7, #80	; 0x50
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40023800 	.word	0x40023800
 800089c:	40007000 	.word	0x40007000

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <Error_Handler+0x8>
	...

080008ac <motorcontrol>:
#include "adc.h"
#include "main.h"


void motorcontrol()
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	theta=Read_theta();
 80008b0:	f000 fd44 	bl	800133c <Read_theta>
 80008b4:	eef0 7a40 	vmov.f32	s15, s0
 80008b8:	4b43      	ldr	r3, [pc, #268]	; (80009c8 <motorcontrol+0x11c>)
 80008ba:	edc3 7a00 	vstr	s15, [r3]
	sp=motor_speed;
 80008be:	4b43      	ldr	r3, [pc, #268]	; (80009cc <motorcontrol+0x120>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a43      	ldr	r2, [pc, #268]	; (80009d0 <motorcontrol+0x124>)
 80008c4:	6013      	str	r3, [r2, #0]
	Iqref=Speed_PI_Controller(sp_ref-sp);
 80008c6:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <motorcontrol+0x128>)
 80008c8:	ed93 7a00 	vldr	s14, [r3]
 80008cc:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <motorcontrol+0x124>)
 80008ce:	edd3 7a00 	vldr	s15, [r3]
 80008d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d6:	eeb0 0a67 	vmov.f32	s0, s15
 80008da:	f000 f8c7 	bl	8000a6c <Speed_PI_Controller>
 80008de:	eef0 7a40 	vmov.f32	s15, s0
 80008e2:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <motorcontrol+0x12c>)
 80008e4:	edc3 7a00 	vstr	s15, [r3]
	Ia=GetPhaseACurrent();
 80008e8:	f7ff fece 	bl	8000688 <GetPhaseACurrent>
 80008ec:	eef0 7a40 	vmov.f32	s15, s0
 80008f0:	4b3a      	ldr	r3, [pc, #232]	; (80009dc <motorcontrol+0x130>)
 80008f2:	edc3 7a00 	vstr	s15, [r3]
	Ib=GetPhaseBCurrent();
 80008f6:	f7ff fed5 	bl	80006a4 <GetPhaseBCurrent>
 80008fa:	eef0 7a40 	vmov.f32	s15, s0
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <motorcontrol+0x134>)
 8000900:	edc3 7a00 	vstr	s15, [r3]
	Ic=GetPhaseCCurrent();
 8000904:	f7ff fedc 	bl	80006c0 <GetPhaseCCurrent>
 8000908:	eef0 7a40 	vmov.f32	s15, s0
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <motorcontrol+0x138>)
 800090e:	edc3 7a00 	vstr	s15, [r3]
	ClarkeParkTransform(Ia,Ib,theta,&Id,&Iq);
 8000912:	4b32      	ldr	r3, [pc, #200]	; (80009dc <motorcontrol+0x130>)
 8000914:	edd3 7a00 	vldr	s15, [r3]
 8000918:	4b31      	ldr	r3, [pc, #196]	; (80009e0 <motorcontrol+0x134>)
 800091a:	ed93 7a00 	vldr	s14, [r3]
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <motorcontrol+0x11c>)
 8000920:	edd3 6a00 	vldr	s13, [r3]
 8000924:	4930      	ldr	r1, [pc, #192]	; (80009e8 <motorcontrol+0x13c>)
 8000926:	4831      	ldr	r0, [pc, #196]	; (80009ec <motorcontrol+0x140>)
 8000928:	eeb0 1a66 	vmov.f32	s2, s13
 800092c:	eef0 0a47 	vmov.f32	s1, s14
 8000930:	eeb0 0a67 	vmov.f32	s0, s15
 8000934:	f000 fd5c 	bl	80013f0 <ClarkeParkTransform>
	Vd=PI_Controller(Idref-Id);
 8000938:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <motorcontrol+0x144>)
 800093a:	ed93 7a00 	vldr	s14, [r3]
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <motorcontrol+0x140>)
 8000940:	edd3 7a00 	vldr	s15, [r3]
 8000944:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000948:	eeb0 0a67 	vmov.f32	s0, s15
 800094c:	f000 f860 	bl	8000a10 <PI_Controller>
 8000950:	eef0 7a40 	vmov.f32	s15, s0
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <motorcontrol+0x148>)
 8000956:	edc3 7a00 	vstr	s15, [r3]
	Vq=PI_Controller(Iqref-Iq);
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <motorcontrol+0x12c>)
 800095c:	ed93 7a00 	vldr	s14, [r3]
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <motorcontrol+0x13c>)
 8000962:	edd3 7a00 	vldr	s15, [r3]
 8000966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800096a:	eeb0 0a67 	vmov.f32	s0, s15
 800096e:	f000 f84f 	bl	8000a10 <PI_Controller>
 8000972:	eef0 7a40 	vmov.f32	s15, s0
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <motorcontrol+0x14c>)
 8000978:	edc3 7a00 	vstr	s15, [r3]
	InverseParkTransform(Vd,Vq,theta,&Valpha,&Vbeta);
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <motorcontrol+0x148>)
 800097e:	edd3 7a00 	vldr	s15, [r3]
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <motorcontrol+0x14c>)
 8000984:	ed93 7a00 	vldr	s14, [r3]
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <motorcontrol+0x11c>)
 800098a:	edd3 6a00 	vldr	s13, [r3]
 800098e:	491b      	ldr	r1, [pc, #108]	; (80009fc <motorcontrol+0x150>)
 8000990:	481b      	ldr	r0, [pc, #108]	; (8000a00 <motorcontrol+0x154>)
 8000992:	eeb0 1a66 	vmov.f32	s2, s13
 8000996:	eef0 0a47 	vmov.f32	s1, s14
 800099a:	eeb0 0a67 	vmov.f32	s0, s15
 800099e:	f000 fd81 	bl	80014a4 <InverseParkTransform>
	SVM( Va, Vb, Vc);
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <motorcontrol+0x158>)
 80009a4:	edd3 7a00 	vldr	s15, [r3]
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <motorcontrol+0x15c>)
 80009aa:	ed93 7a00 	vldr	s14, [r3]
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <motorcontrol+0x160>)
 80009b0:	edd3 6a00 	vldr	s13, [r3]
 80009b4:	eeb0 1a66 	vmov.f32	s2, s13
 80009b8:	eef0 0a47 	vmov.f32	s1, s14
 80009bc:	eeb0 0a67 	vmov.f32	s0, s15
 80009c0:	f000 fcec 	bl	800139c <SVM>
}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000090 	.word	0x20000090
 80009cc:	20000094 	.word	0x20000094
 80009d0:	200000a0 	.word	0x200000a0
 80009d4:	2000009c 	.word	0x2000009c
 80009d8:	200000a8 	.word	0x200000a8
 80009dc:	20000078 	.word	0x20000078
 80009e0:	2000007c 	.word	0x2000007c
 80009e4:	20000080 	.word	0x20000080
 80009e8:	200000b0 	.word	0x200000b0
 80009ec:	200000ac 	.word	0x200000ac
 80009f0:	200000a4 	.word	0x200000a4
 80009f4:	200000b4 	.word	0x200000b4
 80009f8:	200000b8 	.word	0x200000b8
 80009fc:	20000074 	.word	0x20000074
 8000a00:	20000070 	.word	0x20000070
 8000a04:	200000bc 	.word	0x200000bc
 8000a08:	200000c0 	.word	0x200000c0
 8000a0c:	200000c4 	.word	0x200000c4

08000a10 <PI_Controller>:
 *  Created on: 22 août 2024
 *      Author: taghl
 */
#include <picontrol.h>
#include "main.h"
float PI_Controller(float error) {
 8000a10:	b480      	push	{r7}
 8000a12:	b087      	sub	sp, #28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	ed87 0a01 	vstr	s0, [r7, #4]
    float integral = 0.0f;
 8000a1a:	f04f 0300 	mov.w	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    float Kp = 0.1f;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <PI_Controller+0x54>)
 8000a22:	613b      	str	r3, [r7, #16]
    float Ki = 0.01f;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <PI_Controller+0x58>)
 8000a26:	60fb      	str	r3, [r7, #12]
    integral += error;
 8000a28:	ed97 7a05 	vldr	s14, [r7, #20]
 8000a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a34:	edc7 7a05 	vstr	s15, [r7, #20]
    return (Kp * error + Ki * integral);
 8000a38:	ed97 7a04 	vldr	s14, [r7, #16]
 8000a3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a44:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a48:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a50:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000a54:	eeb0 0a67 	vmov.f32	s0, s15
 8000a58:	371c      	adds	r7, #28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	3dcccccd 	.word	0x3dcccccd
 8000a68:	3c23d70a 	.word	0x3c23d70a

08000a6c <Speed_PI_Controller>:
float Speed_PI_Controller(float speedError)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	ed87 0a01 	vstr	s0, [r7, #4]
	float Spi=0.0f;
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
	float Ki_sp=0.01f;
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	; (8000b38 <Speed_PI_Controller+0xcc>)
 8000a7e:	617b      	str	r3, [r7, #20]
	float Kp_sp=0.1f;
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <Speed_PI_Controller+0xd0>)
 8000a82:	613b      	str	r3, [r7, #16]
	float Max=0.0f;
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
	 Spi+= speedError * Ki_sp;
 8000a8a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a96:	ed97 7a06 	vldr	s14, [r7, #24]
 8000a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a9e:	edc7 7a06 	vstr	s15, [r7, #24]
	float output = Kp_sp * speedError + Spi;
 8000aa2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000aae:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ab6:	edc7 7a07 	vstr	s15, [r7, #28]


	    if (output > Max) {
 8000aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8000abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	dd0e      	ble.n	8000aea <Speed_PI_Controller+0x7e>
	        output = Max;
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	61fb      	str	r3, [r7, #28]
	        Spi-= speedError * Ki_sp;
 8000ad0:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000adc:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ae4:	edc7 7a06 	vstr	s15, [r7, #24]
 8000ae8:	e01c      	b.n	8000b24 <Speed_PI_Controller+0xb8>
	    } else if (output < -Max) {
 8000aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aee:	eef1 7a67 	vneg.f32	s15, s15
 8000af2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000afe:	d511      	bpl.n	8000b24 <Speed_PI_Controller+0xb8>
	        output = -Max;
 8000b00:	edd7 7a03 	vldr	s15, [r7, #12]
 8000b04:	eef1 7a67 	vneg.f32	s15, s15
 8000b08:	edc7 7a07 	vstr	s15, [r7, #28]
	       Spi-= speedError * Ki_sp;
 8000b0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b10:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b18:	ed97 7a06 	vldr	s14, [r7, #24]
 8000b1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b20:	edc7 7a06 	vstr	s15, [r7, #24]
	    }

	    return output;
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	ee07 3a90 	vmov	s15, r3
}
 8000b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000b2e:	3724      	adds	r7, #36	; 0x24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	3c23d70a 	.word	0x3c23d70a
 8000b3c:	3dcccccd 	.word	0x3dcccccd

08000b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f001 fa3a 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <NMI_Handler+0x4>

08000b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <UsageFault_Handler+0x4>

08000bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bdc:	f000 fd24 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <TIM3_IRQHandler+0x10>)
 8000bea:	f002 fbaf 	bl	800334c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000016c 	.word	0x2000016c

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b092      	sub	sp, #72	; 0x48
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
 8000c3c:	615a      	str	r2, [r3, #20]
 8000c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2220      	movs	r2, #32
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fbfc 	bl	8004444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c4c:	4b3f      	ldr	r3, [pc, #252]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c4e:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <MX_TIM1_Init+0x134>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c52:	4b3e      	ldr	r3, [pc, #248]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b3c      	ldr	r3, [pc, #240]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b39      	ldr	r3, [pc, #228]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c6c:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c78:	4834      	ldr	r0, [pc, #208]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c7a:	f002 f8bc 	bl	8002df6 <HAL_TIM_PWM_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000c84:	f7ff fe0c 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c94:	4619      	mov	r1, r3
 8000c96:	482d      	ldr	r0, [pc, #180]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000c98:	f003 fadc 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000ca2:	f7ff fdfd 	bl	80008a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca6:	2360      	movs	r3, #96	; 0x60
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4820      	ldr	r0, [pc, #128]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000ccc:	f002 fce2 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000cd6:	f7ff fde3 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	2204      	movs	r2, #4
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481a      	ldr	r0, [pc, #104]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000ce4:	f002 fcd6 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000cee:	f7ff fdd7 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf6:	2208      	movs	r2, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000cfc:	f002 fcca 	bl	8003694 <HAL_TIM_PWM_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000d06:	f7ff fdcb 	bl	80008a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d22:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000d2e:	f003 faff 	bl	8004330 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000d38:	f7ff fdb2 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <MX_TIM1_Init+0x130>)
 8000d3e:	f000 f9fb 	bl	8001138 <HAL_TIM_MspPostInit>

}
 8000d42:	bf00      	nop
 8000d44:	3748      	adds	r7, #72	; 0x48
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000dc 	.word	0x200000dc
 8000d50:	40010000 	.word	0x40010000

08000d54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2224      	movs	r2, #36	; 0x24
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 fb6e 	bl	8004444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d84:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000db0:	2301      	movs	r3, #1
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000db8:	230a      	movs	r3, #10
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000dc4:	f002 f98e 	bl	80030e4 <HAL_TIM_Encoder_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000dce:	f7ff fd67 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_TIM2_Init+0xa4>)
 8000de0:	f003 fa38 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000dea:	f7ff fd59 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3730      	adds	r7, #48	; 0x30
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000124 	.word	0x20000124

08000dfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0318 	add.w	r3, r7, #24
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e28:	4a36      	ldr	r2, [pc, #216]	; (8000f04 <MX_TIM3_Init+0x108>)
 8000e2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e32:	4b33      	ldr	r3, [pc, #204]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e38:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e48:	2280      	movs	r2, #128	; 0x80
 8000e4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e4c:	482c      	ldr	r0, [pc, #176]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e4e:	f001 ff83 	bl	8002d58 <HAL_TIM_Base_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000e58:	f7ff fd22 	bl	80008a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e62:	f107 0318 	add.w	r3, r7, #24
 8000e66:	4619      	mov	r1, r3
 8000e68:	4825      	ldr	r0, [pc, #148]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e6a:	f002 fcd5 	bl	8003818 <HAL_TIM_ConfigClockSource>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e74:	f7ff fd14 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e7a:	f002 f80b 	bl	8002e94 <HAL_TIM_IC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e84:	f7ff fd0c 	bl	80008a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4619      	mov	r1, r3
 8000e96:	481a      	ldr	r0, [pc, #104]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000e98:	f003 f9dc 	bl	8004254 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000ea2:	f7ff fcfd 	bl	80008a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000ebe:	f002 fb4d 	bl	800355c <HAL_TIM_IC_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ec8:	f7ff fcea 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000ed4:	f002 fb42 	bl	800355c <HAL_TIM_IC_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000ede:	f7ff fcdf 	bl	80008a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	; (8000f00 <MX_TIM3_Init+0x104>)
 8000eea:	f002 fb37 	bl	800355c <HAL_TIM_IC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000ef4:	f7ff fcd4 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000016c 	.word	0x2000016c
 8000f04:	40000400 	.word	0x40000400

08000f08 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <HAL_TIM_PWM_MspInit+0x3c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10d      	bne.n	8000f36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_PWM_MspInit+0x40>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <HAL_TIM_PWM_MspInit+0x40>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_TIM_PWM_MspInit+0x40>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40023800 	.word	0x40023800

08000f4c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d14a      	bne.n	8001004 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b26      	ldr	r3, [pc, #152]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f76:	4a25      	ldr	r2, [pc, #148]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7e:	4b23      	ldr	r3, [pc, #140]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_TIM_Encoder_MspInit+0xc0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480c      	ldr	r0, [pc, #48]	; (8001010 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000fe0:	f001 f8d2 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <HAL_TIM_Encoder_MspInit+0xc8>)
 8001000:	f001 f8c2 	bl	8002188 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	; 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400

08001018 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 031c 	add.w	r3, r7, #28
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a3b      	ldr	r2, [pc, #236]	; (8001124 <HAL_TIM_Base_MspInit+0x10c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d16f      	bne.n	800111a <HAL_TIM_Base_MspInit+0x102>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	4b3a      	ldr	r3, [pc, #232]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a39      	ldr	r2, [pc, #228]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b37      	ldr	r3, [pc, #220]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	4b33      	ldr	r3, [pc, #204]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a32      	ldr	r2, [pc, #200]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b30      	ldr	r3, [pc, #192]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	617b      	str	r3, [r7, #20]
 8001070:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	4b2c      	ldr	r3, [pc, #176]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a2b      	ldr	r2, [pc, #172]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a24      	ldr	r2, [pc, #144]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <HAL_TIM_Base_MspInit+0x110>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010aa:	2380      	movs	r3, #128	; 0x80
 80010ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ba:	2302      	movs	r3, #2
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4819      	ldr	r0, [pc, #100]	; (800112c <HAL_TIM_Base_MspInit+0x114>)
 80010c6:	f001 f85f 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010da:	2302      	movs	r3, #2
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	4619      	mov	r1, r3
 80010e4:	4812      	ldr	r0, [pc, #72]	; (8001130 <HAL_TIM_Base_MspInit+0x118>)
 80010e6:	f001 f84f 	bl	8002188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010fa:	2302      	movs	r3, #2
 80010fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	4619      	mov	r1, r3
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_TIM_Base_MspInit+0x11c>)
 8001106:	f001 f83f 	bl	8002188 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	201d      	movs	r0, #29
 8001110:	f000 ff7d 	bl	800200e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001114:	201d      	movs	r0, #29
 8001116:	f000 ff96 	bl	8002046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40000400 	.word	0x40000400
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000
 8001130:	40020400 	.word	0x40020400
 8001134:	40020800 	.word	0x40020800

08001138 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <HAL_TIM_MspPostInit+0x68>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d11e      	bne.n	8001198 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a10      	ldr	r2, [pc, #64]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 8001164:	f043 0310 	orr.w	r3, r3, #16
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_TIM_MspPostInit+0x6c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8001176:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800117a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <HAL_TIM_MspPostInit+0x70>)
 8001194:	f000 fff8 	bl	8002188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40010000 	.word	0x40010000
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40021000 	.word	0x40021000

080011ac <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 1 */


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	7f1b      	ldrb	r3, [r3, #28]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d138      	bne.n	800122e <HAL_TIM_IC_CaptureCallback+0x82>
    {
        current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f002 fbf2 	bl	80039a8 <HAL_TIM_ReadCapturedValue>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b57      	ldr	r3, [pc, #348]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80011ca:	601a      	str	r2, [r3, #0]
        capture_difference = current_capture - previous_capture[0];
 80011cc:	4b56      	ldr	r3, [pc, #344]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b56      	ldr	r3, [pc, #344]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	4a56      	ldr	r2, [pc, #344]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80011d8:	6013      	str	r3, [r2, #0]

               if (capture_difference < 0)
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da06      	bge.n	80011f0 <HAL_TIM_IC_CaptureCallback+0x44>
               {
                   capture_difference += 0xFFFF;
 80011e2:	4b53      	ldr	r3, [pc, #332]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011ea:	33ff      	adds	r3, #255	; 0xff
 80011ec:	4a50      	ldr	r2, [pc, #320]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80011ee:	6013      	str	r3, [r2, #0]
               }

        motor_speed = (float)SystemCoreClock / (float)(htim->Init.Prescaler + 1) / (float)capture_difference;
 80011f0:	4b50      	ldr	r3, [pc, #320]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x188>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	3301      	adds	r3, #1
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120e:	4b48      	ldr	r3, [pc, #288]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121e:	4b46      	ldr	r3, [pc, #280]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001220:	edc3 7a00 	vstr	s15, [r3]
        previous_capture[0] = current_capture;
 8001224:	4b40      	ldr	r3, [pc, #256]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a40      	ldr	r2, [pc, #256]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 800122a:	6013      	str	r3, [r2, #0]
        motor_speed = (float)SystemCoreClock / (float)(htim->Init.Prescaler + 1) / (float)capture_difference;
        previous_capture[2] = current_capture;

    }

}
 800122c:	e078      	b.n	8001320 <HAL_TIM_IC_CaptureCallback+0x174>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7f1b      	ldrb	r3, [r3, #28]
 8001232:	2b02      	cmp	r3, #2
 8001234:	d138      	bne.n	80012a8 <HAL_TIM_IC_CaptureCallback+0xfc>
        current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001236:	2104      	movs	r1, #4
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f002 fbb5 	bl	80039a8 <HAL_TIM_ReadCapturedValue>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001244:	601a      	str	r2, [r3, #0]
        capture_difference = current_capture - previous_capture[1];
 8001246:	4b38      	ldr	r3, [pc, #224]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b38      	ldr	r3, [pc, #224]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	4a37      	ldr	r2, [pc, #220]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001252:	6013      	str	r3, [r2, #0]
               if (capture_difference < 0)
 8001254:	4b36      	ldr	r3, [pc, #216]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da06      	bge.n	800126a <HAL_TIM_IC_CaptureCallback+0xbe>
                   capture_difference += 0xFFFF;
 800125c:	4b34      	ldr	r3, [pc, #208]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001264:	33ff      	adds	r3, #255	; 0xff
 8001266:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001268:	6013      	str	r3, [r2, #0]
        motor_speed = (float)SystemCoreClock / (float)(htim->Init.Prescaler + 1) / (float)capture_difference;
 800126a:	4b32      	ldr	r3, [pc, #200]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x188>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	3301      	adds	r3, #1
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	ee07 3a90 	vmov	s15, r3
 8001290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	4b27      	ldr	r3, [pc, #156]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x18c>)
 800129a:	edc3 7a00 	vstr	s15, [r3]
        previous_capture[1] = current_capture;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a22      	ldr	r2, [pc, #136]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 80012a4:	6053      	str	r3, [r2, #4]
}
 80012a6:	e03b      	b.n	8001320 <HAL_TIM_IC_CaptureCallback+0x174>
    else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7f1b      	ldrb	r3, [r3, #28]
 80012ac:	2b04      	cmp	r3, #4
 80012ae:	d137      	bne.n	8001320 <HAL_TIM_IC_CaptureCallback+0x174>
        current_capture = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80012b0:	2108      	movs	r1, #8
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f002 fb78 	bl	80039a8 <HAL_TIM_ReadCapturedValue>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80012be:	601a      	str	r2, [r3, #0]
        capture_difference = current_capture - previous_capture[2];
 80012c0:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	4a19      	ldr	r2, [pc, #100]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80012cc:	6013      	str	r3, [r2, #0]
               if (capture_difference < 0)
 80012ce:	4b18      	ldr	r3, [pc, #96]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da06      	bge.n	80012e4 <HAL_TIM_IC_CaptureCallback+0x138>
                   capture_difference += 0xFFFF;
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80012de:	33ff      	adds	r3, #255	; 0xff
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 80012e2:	6013      	str	r3, [r2, #0]
        motor_speed = (float)SystemCoreClock / (float)(htim->Init.Prescaler + 1) / (float)capture_difference;
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_TIM_IC_CaptureCallback+0x188>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	ee07 3a90 	vmov	s15, r3
 80012ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	3301      	adds	r3, #1
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	ee07 3a90 	vmov	s15, r3
 800130a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800130e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8001314:	edc3 7a00 	vstr	s15, [r3]
        previous_capture[2] = current_capture;
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_TIM_IC_CaptureCallback+0x180>)
 800131e:	6093      	str	r3, [r2, #8]
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200000c8 	.word	0x200000c8
 800132c:	200000d0 	.word	0x200000d0
 8001330:	200000cc 	.word	0x200000cc
 8001334:	20000000 	.word	0x20000000
 8001338:	20000094 	.word	0x20000094

0800133c <Read_theta>:

float Read_theta()
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
      int16_t encoder_position = __HAL_TIM_GET_COUNTER(&htim2);
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <Read_theta+0x50>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001348:	80fb      	strh	r3, [r7, #6]

     theta = ((float)encoder_position / (float)ENCODER_RESOLUTION) * 360.0f;
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <Read_theta+0x54>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001366:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001394 <Read_theta+0x58>
 800136a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <Read_theta+0x5c>)
 8001370:	edc3 7a00 	vstr	s15, [r3]
      return theta;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <Read_theta+0x5c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	ee07 3a90 	vmov	s15, r3
}
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000124 	.word	0x20000124
 8001390:	20000098 	.word	0x20000098
 8001394:	43b40000 	.word	0x43b40000
 8001398:	20000090 	.word	0x20000090

0800139c <SVM>:
void SVM(float Va, float Vb, float Vc) //Space Vector Modulation
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80013a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80013aa:	ed87 1a01 	vstr	s2, [r7, #4]

     TIM1->CCR1 = Va;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <SVM+0x50>)
 80013b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013b8:	ee17 2a90 	vmov	r2, s15
 80013bc:	635a      	str	r2, [r3, #52]	; 0x34
     TIM1->CCR2 = Vb;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <SVM+0x50>)
 80013c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c8:	ee17 2a90 	vmov	r2, s15
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
     TIM1->CCR3 = Vc;
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <SVM+0x50>)
 80013d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d8:	ee17 2a90 	vmov	r2, s15
 80013dc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40010000 	.word	0x40010000

080013f0 <ClarkeParkTransform>:
// transformations.c
#include "transfo.h"
#include "main.h"
void ClarkeParkTransform(float I_a, float I_b, float theta, float *I_d,float * I_q) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	ed2d 8b02 	vpush	{d8}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80013fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8001402:	ed87 1a03 	vstr	s2, [r7, #12]
 8001406:	60b8      	str	r0, [r7, #8]
 8001408:	6079      	str	r1, [r7, #4]
    // Clarke Transformation
    float I_alpha = I_a;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	61fb      	str	r3, [r7, #28]
    float I_beta = (I_a + 2 * I_b) / sqrtf(3.0f);
 800140e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001412:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001416:	edd7 7a05 	vldr	s15, [r7, #20]
 800141a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800141e:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014a0 <ClarkeParkTransform+0xb0>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	edc7 7a06 	vstr	s15, [r7, #24]
    // Park Transformation
    *I_d = I_alpha * cosf(theta) + I_beta * sinf(theta);
 800142a:	ed97 0a03 	vldr	s0, [r7, #12]
 800142e:	f003 f811 	bl	8004454 <cosf>
 8001432:	eeb0 7a40 	vmov.f32	s14, s0
 8001436:	edd7 7a07 	vldr	s15, [r7, #28]
 800143a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800143e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001442:	f003 f84b 	bl	80044dc <sinf>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	edd7 7a06 	vldr	s15, [r7, #24]
 800144e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001452:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	edc3 7a00 	vstr	s15, [r3]
    *I_q = -I_alpha * sinf(theta) + I_beta * cosf(theta);
 800145c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001460:	eeb1 8a67 	vneg.f32	s16, s15
 8001464:	ed97 0a03 	vldr	s0, [r7, #12]
 8001468:	f003 f838 	bl	80044dc <sinf>
 800146c:	eef0 7a40 	vmov.f32	s15, s0
 8001470:	ee28 8a27 	vmul.f32	s16, s16, s15
 8001474:	ed97 0a03 	vldr	s0, [r7, #12]
 8001478:	f002 ffec 	bl	8004454 <cosf>
 800147c:	eeb0 7a40 	vmov.f32	s14, s0
 8001480:	edd7 7a06 	vldr	s15, [r7, #24]
 8001484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001488:	ee78 7a27 	vadd.f32	s15, s16, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a00 	vstr	s15, [r3]
}
 8001492:	bf00      	nop
 8001494:	3720      	adds	r7, #32
 8001496:	46bd      	mov	sp, r7
 8001498:	ecbd 8b02 	vpop	{d8}
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	3fddb3d7 	.word	0x3fddb3d7

080014a4 <InverseParkTransform>:

void InverseParkTransform(float V_d, float V_q, float theta, float *V_alpha, float *V_beta) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	ed2d 8b02 	vpush	{d8}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80014b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80014b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80014ba:	60b8      	str	r0, [r7, #8]
 80014bc:	6079      	str	r1, [r7, #4]
    // Inverse Park Transformation
    *V_alpha = V_d * cosf(theta) - V_q * sinf(theta);
 80014be:	ed97 0a03 	vldr	s0, [r7, #12]
 80014c2:	f002 ffc7 	bl	8004454 <cosf>
 80014c6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ce:	ee27 8a27 	vmul.f32	s16, s14, s15
 80014d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80014d6:	f003 f801 	bl	80044dc <sinf>
 80014da:	eeb0 7a40 	vmov.f32	s14, s0
 80014de:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	ee78 7a67 	vsub.f32	s15, s16, s15
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	edc3 7a00 	vstr	s15, [r3]
    *V_beta = V_d * sinf(theta) + V_q * cosf(theta);
 80014f0:	ed97 0a03 	vldr	s0, [r7, #12]
 80014f4:	f002 fff2 	bl	80044dc <sinf>
 80014f8:	eeb0 7a40 	vmov.f32	s14, s0
 80014fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001500:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001504:	ed97 0a03 	vldr	s0, [r7, #12]
 8001508:	f002 ffa4 	bl	8004454 <cosf>
 800150c:	eeb0 7a40 	vmov.f32	s14, s0
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	ee78 7a27 	vadd.f32	s15, s16, s15
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	edc3 7a00 	vstr	s15, [r3]
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	ecbd 8b02 	vpop	{d8}
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001530:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001568 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001536:	490e      	ldr	r1, [pc, #56]	; (8001570 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800154c:	4c0b      	ldr	r4, [pc, #44]	; (800157c <LoopFillZerobss+0x26>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800155a:	f7ff fb4d 	bl	8000bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155e:	f002 ff4d 	bl	80043fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001562:	f7ff f90d 	bl	8000780 <main>
  bx  lr    
 8001566:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800156c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001570:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001574:	0800539c 	.word	0x0800539c
  ldr r2, =_sbss
 8001578:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800157c:	200001b8 	.word	0x200001b8

08001580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001580:	e7fe      	b.n	8001580 <ADC_IRQHandler>
	...

08001584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0d      	ldr	r2, [pc, #52]	; (80015c4 <HAL_Init+0x40>)
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_Init+0x40>)
 800159a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a0:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_Init+0x40>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a07      	ldr	r2, [pc, #28]	; (80015c4 <HAL_Init+0x40>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f000 fd23 	bl	8001ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f000 f808 	bl	80015c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b8:	f7ff fac2 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x54>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <HAL_InitTick+0x58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	4619      	mov	r1, r3
 80015da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015de:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd3b 	bl	8002062 <HAL_SYSTICK_Config>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00e      	b.n	8001614 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b0f      	cmp	r3, #15
 80015fa:	d80a      	bhi.n	8001612 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015fc:	2200      	movs	r2, #0
 80015fe:	6879      	ldr	r1, [r7, #4]
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f000 fd03 	bl	800200e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001608:	4a06      	ldr	r2, [pc, #24]	; (8001624 <HAL_InitTick+0x5c>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	e000      	b.n	8001614 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	20000008 	.word	0x20000008
 8001624:	20000004 	.word	0x20000004

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	20000008 	.word	0x20000008
 800164c:	200001b4 	.word	0x200001b4

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	200001b4 	.word	0x200001b4

08001668 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e033      	b.n	80016e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7fe ff7a 	bl	8000580 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016ae:	f023 0302 	bic.w	r3, r3, #2
 80016b2:	f043 0202 	orr.w	r2, r3, #2
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 fa4e 	bl	8001b5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f023 0303 	bic.w	r3, r3, #3
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
 80016d6:	e001      	b.n	80016dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start_DMA+0x1e>
 800170a:	2302      	movs	r3, #2
 800170c:	e0ce      	b.n	80018ac <HAL_ADC_Start_DMA+0x1bc>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d018      	beq.n	8001756 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001734:	4b5f      	ldr	r3, [pc, #380]	; (80018b4 <HAL_ADC_Start_DMA+0x1c4>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a5f      	ldr	r2, [pc, #380]	; (80018b8 <HAL_ADC_Start_DMA+0x1c8>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9a      	lsrs	r2, r3, #18
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	3b01      	subs	r3, #1
 800174e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001764:	d107      	bne.n	8001776 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001774:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b01      	cmp	r3, #1
 8001782:	f040 8086 	bne.w	8001892 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d007      	beq.n	80017b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c4:	d106      	bne.n	80017d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	f023 0206 	bic.w	r2, r3, #6
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	645a      	str	r2, [r3, #68]	; 0x44
 80017d2:	e002      	b.n	80017da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <HAL_ADC_Start_DMA+0x1cc>)
 80017e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	4a35      	ldr	r2, [pc, #212]	; (80018c0 <HAL_ADC_Start_DMA+0x1d0>)
 80017ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <HAL_ADC_Start_DMA+0x1d4>)
 80017f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	4a33      	ldr	r2, [pc, #204]	; (80018c8 <HAL_ADC_Start_DMA+0x1d8>)
 80017fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001806:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001816:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001826:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	334c      	adds	r3, #76	; 0x4c
 8001832:	4619      	mov	r1, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f000 fc1f 	bl	800207a <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10f      	bne.n	8001868 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d129      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	e020      	b.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_ADC_Start_DMA+0x1dc>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d11b      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d114      	bne.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	e00b      	b.n	80018aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f043 0210 	orr.w	r2, r3, #16
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f043 0201 	orr.w	r2, r3, #1
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	40012300 	.word	0x40012300
 80018c0:	08001d55 	.word	0x08001d55
 80018c4:	08001e0f 	.word	0x08001e0f
 80018c8:	08001e2b 	.word	0x08001e2b
 80018cc:	40012000 	.word	0x40012000

080018d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x1c>
 8001910:	2302      	movs	r3, #2
 8001912:	e113      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x244>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d925      	bls.n	8001970 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68d9      	ldr	r1, [r3, #12]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	3b1e      	subs	r3, #30
 800193a:	2207      	movs	r2, #7
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43da      	mvns	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	400a      	ands	r2, r1
 8001948:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68d9      	ldr	r1, [r3, #12]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4618      	mov	r0, r3
 800195c:	4603      	mov	r3, r0
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4403      	add	r3, r0
 8001962:	3b1e      	subs	r3, #30
 8001964:	409a      	lsls	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	e022      	b.n	80019b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6919      	ldr	r1, [r3, #16]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	2207      	movs	r2, #7
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	400a      	ands	r2, r1
 8001992:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6919      	ldr	r1, [r3, #16]
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	4603      	mov	r3, r0
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4403      	add	r3, r0
 80019ac:	409a      	lsls	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d824      	bhi.n	8001a08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b05      	subs	r3, #5
 80019d0:	221f      	movs	r2, #31
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43da      	mvns	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	400a      	ands	r2, r1
 80019de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	3b05      	subs	r3, #5
 80019fa:	fa00 f203 	lsl.w	r2, r0, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
 8001a06:	e04c      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d824      	bhi.n	8001a5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	3b23      	subs	r3, #35	; 0x23
 8001a22:	221f      	movs	r2, #31
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	400a      	ands	r2, r1
 8001a30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b23      	subs	r3, #35	; 0x23
 8001a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
 8001a58:	e023      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b41      	subs	r3, #65	; 0x41
 8001a6c:	221f      	movs	r2, #31
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	400a      	ands	r2, r1
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	3b41      	subs	r3, #65	; 0x41
 8001a96:	fa00 f203 	lsl.w	r2, r0, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_ADC_ConfigChannel+0x250>)
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_ADC_ConfigChannel+0x254>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d10f      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1d8>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b12      	cmp	r3, #18
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <HAL_ADC_ConfigChannel+0x254>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x23a>
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_ADC_ConfigChannel+0x258>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d003      	beq.n	8001aec <HAL_ADC_ConfigChannel+0x1f4>
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2b11      	cmp	r3, #17
 8001aea:	d122      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_ADC_ConfigChannel+0x258>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d111      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_ADC_ConfigChannel+0x25c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_ADC_ConfigChannel+0x260>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9a      	lsrs	r2, r3, #18
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	10000012 	.word	0x10000012
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b64:	4b79      	ldr	r3, [pc, #484]	; (8001d4c <ADC_Init+0x1f0>)
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	431a      	orrs	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	021a      	lsls	r2, r3, #8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6899      	ldr	r1, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	4a58      	ldr	r2, [pc, #352]	; (8001d50 <ADC_Init+0x1f4>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d022      	beq.n	8001c3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6899      	ldr	r1, [r3, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	e00f      	b.n	8001c5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c58:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f022 0202 	bic.w	r2, r2, #2
 8001c68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6899      	ldr	r1, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7e1b      	ldrb	r3, [r3, #24]
 8001c74:	005a      	lsls	r2, r3, #1
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c96:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ca6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6859      	ldr	r1, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	035a      	lsls	r2, r3, #13
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	e007      	b.n	8001cd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	051a      	lsls	r2, r3, #20
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6899      	ldr	r1, [r3, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d12:	025a      	lsls	r2, r3, #9
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6899      	ldr	r1, [r3, #8]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	029a      	lsls	r2, r3, #10
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	609a      	str	r2, [r3, #8]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	40012300 	.word	0x40012300
 8001d50:	0f000001 	.word	0x0f000001

08001d54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d13c      	bne.n	8001de8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d12b      	bne.n	8001de0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d127      	bne.n	8001de0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d96:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d006      	beq.n	8001dac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d119      	bne.n	8001de0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f022 0220 	bic.w	r2, r2, #32
 8001dba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7fe fc11 	bl	8000608 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001de6:	e00e      	b.n	8001e06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d003      	beq.n	8001dfc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7ff fd75 	bl	80018e4 <HAL_ADC_ErrorCallback>
}
 8001dfa:	e004      	b.n	8001e06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
}
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fd57 	bl	80018d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e36:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0204 	orr.w	r2, r3, #4
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fd4a 	bl	80018e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0b      	blt.n	8001ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	f003 021f 	and.w	r2, r3, #31
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <__NVIC_EnableIRQ+0x38>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	2001      	movs	r0, #1
 8001ede:	fa00 f202 	lsl.w	r2, r0, r2
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	db0a      	blt.n	8001f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	490c      	ldr	r1, [pc, #48]	; (8001f44 <__NVIC_SetPriority+0x4c>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	0112      	lsls	r2, r2, #4
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f20:	e00a      	b.n	8001f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	4908      	ldr	r1, [pc, #32]	; (8001f48 <__NVIC_SetPriority+0x50>)
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	3b04      	subs	r3, #4
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	b2d2      	uxtb	r2, r2
 8001f34:	440b      	add	r3, r1
 8001f36:	761a      	strb	r2, [r3, #24]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	e000e100 	.word	0xe000e100
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	; 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f1c3 0307 	rsb	r3, r3, #7
 8001f66:	2b04      	cmp	r3, #4
 8001f68:	bf28      	it	cs
 8001f6a:	2304      	movcs	r3, #4
 8001f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2b06      	cmp	r3, #6
 8001f74:	d902      	bls.n	8001f7c <NVIC_EncodePriority+0x30>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3b03      	subs	r3, #3
 8001f7a:	e000      	b.n	8001f7e <NVIC_EncodePriority+0x32>
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	401a      	ands	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f94:	f04f 31ff 	mov.w	r1, #4294967295
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9e:	43d9      	mvns	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa4:	4313      	orrs	r3, r2
         );
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	; 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fc4:	d301      	bcc.n	8001fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00f      	b.n	8001fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <SysTick_Config+0x40>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f7ff ff8e 	bl	8001ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fdc:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <SysTick_Config+0x40>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fe2:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <SysTick_Config+0x40>)
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	e000e010 	.word	0xe000e010

08001ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7ff ff29 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200e:	b580      	push	{r7, lr}
 8002010:	b086      	sub	sp, #24
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002020:	f7ff ff3e 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8002024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	68b9      	ldr	r1, [r7, #8]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f7ff ff8e 	bl	8001f4c <NVIC_EncodePriority>
 8002030:	4602      	mov	r2, r0
 8002032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff ff5d 	bl	8001ef8 <__NVIC_SetPriority>
}
 800203e:	bf00      	nop
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff31 	bl	8001ebc <__NVIC_EnableIRQ>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ffa2 	bl	8001fb4 <SysTick_Config>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b086      	sub	sp, #24
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	607a      	str	r2, [r7, #4]
 8002086:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_DMA_Start_IT+0x26>
 800209c:	2302      	movs	r3, #2
 800209e:	e040      	b.n	8002122 <HAL_DMA_Start_IT+0xa8>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d12f      	bne.n	8002114 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	68b9      	ldr	r1, [r7, #8]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f82e 	bl	800212a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	223f      	movs	r2, #63	; 0x3f
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0216 	orr.w	r2, r2, #22
 80020e8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0208 	orr.w	r2, r2, #8
 8002100:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	e005      	b.n	8002120 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211c:	2302      	movs	r3, #2
 800211e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002120:	7dfb      	ldrb	r3, [r7, #23]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
 8002136:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002146:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d108      	bne.n	800216a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002168:	e007      	b.n	800217a <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	60da      	str	r2, [r3, #12]
}
 800217a:	bf00      	nop
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219e:	2300      	movs	r3, #0
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	e159      	b.n	8002458 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a4:	2201      	movs	r2, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f040 8148 	bne.w	8002452 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d005      	beq.n	80021da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d130      	bne.n	800223c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	2203      	movs	r2, #3
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68da      	ldr	r2, [r3, #12]
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002210:	2201      	movs	r2, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f003 0201 	and.w	r2, r3, #1
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	2b03      	cmp	r3, #3
 8002246:	d017      	beq.n	8002278 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2203      	movs	r2, #3
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	69fb      	ldr	r3, [r7, #28]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d123      	bne.n	80022cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	08da      	lsrs	r2, r3, #3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3208      	adds	r2, #8
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	220f      	movs	r2, #15
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	08da      	lsrs	r2, r3, #3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3208      	adds	r2, #8
 80022c6:	69b9      	ldr	r1, [r7, #24]
 80022c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	2203      	movs	r2, #3
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0203 	and.w	r2, r3, #3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a2 	beq.w	8002452 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	4b57      	ldr	r3, [pc, #348]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	4a56      	ldr	r2, [pc, #344]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800231c:	6453      	str	r3, [r2, #68]	; 0x44
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <HAL_GPIO_Init+0x2e8>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	220f      	movs	r2, #15
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a49      	ldr	r2, [pc, #292]	; (8002478 <HAL_GPIO_Init+0x2f0>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d019      	beq.n	800238a <HAL_GPIO_Init+0x202>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a48      	ldr	r2, [pc, #288]	; (800247c <HAL_GPIO_Init+0x2f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d013      	beq.n	8002386 <HAL_GPIO_Init+0x1fe>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a47      	ldr	r2, [pc, #284]	; (8002480 <HAL_GPIO_Init+0x2f8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00d      	beq.n	8002382 <HAL_GPIO_Init+0x1fa>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a46      	ldr	r2, [pc, #280]	; (8002484 <HAL_GPIO_Init+0x2fc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <HAL_GPIO_Init+0x1f6>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a45      	ldr	r2, [pc, #276]	; (8002488 <HAL_GPIO_Init+0x300>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_GPIO_Init+0x1f2>
 8002376:	2304      	movs	r3, #4
 8002378:	e008      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237a:	2307      	movs	r3, #7
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x204>
 800237e:	2303      	movs	r3, #3
 8002380:	e004      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002382:	2302      	movs	r3, #2
 8002384:	e002      	b.n	800238c <HAL_GPIO_Init+0x204>
 8002386:	2301      	movs	r3, #1
 8002388:	e000      	b.n	800238c <HAL_GPIO_Init+0x204>
 800238a:	2300      	movs	r3, #0
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	0092      	lsls	r2, r2, #2
 8002394:	4093      	lsls	r3, r2
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800239c:	4935      	ldr	r1, [pc, #212]	; (8002474 <HAL_GPIO_Init+0x2ec>)
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_GPIO_Init+0x304>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <HAL_GPIO_Init+0x304>)
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_GPIO_Init+0x304>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f8:	4a24      	ldr	r2, [pc, #144]	; (800248c <HAL_GPIO_Init+0x304>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fe:	4b23      	ldr	r3, [pc, #140]	; (800248c <HAL_GPIO_Init+0x304>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002422:	4a1a      	ldr	r2, [pc, #104]	; (800248c <HAL_GPIO_Init+0x304>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_GPIO_Init+0x304>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800244c:	4a0f      	ldr	r2, [pc, #60]	; (800248c <HAL_GPIO_Init+0x304>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	2b0f      	cmp	r3, #15
 800245c:	f67f aea2 	bls.w	80021a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40023800 	.word	0x40023800
 8002474:	40013800 	.word	0x40013800
 8002478:	40020000 	.word	0x40020000
 800247c:	40020400 	.word	0x40020400
 8002480:	40020800 	.word	0x40020800
 8002484:	40020c00 	.word	0x40020c00
 8002488:	40021000 	.word	0x40021000
 800248c:	40013c00 	.word	0x40013c00

08002490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e267      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d075      	beq.n	800259a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ae:	4b88      	ldr	r3, [pc, #544]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f003 030c 	and.w	r3, r3, #12
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d00c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ba:	4b85      	ldr	r3, [pc, #532]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d112      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024c6:	4b82      	ldr	r3, [pc, #520]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d2:	d10b      	bne.n	80024ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d05b      	beq.n	8002598 <HAL_RCC_OscConfig+0x108>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d157      	bne.n	8002598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e242      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f4:	d106      	bne.n	8002504 <HAL_RCC_OscConfig+0x74>
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x98>
 800250e:	4b70      	ldr	r3, [pc, #448]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6f      	ldr	r2, [pc, #444]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6c      	ldr	r2, [pc, #432]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xb0>
 8002528:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a68      	ldr	r2, [pc, #416]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a65      	ldr	r2, [pc, #404]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7ff f882 	bl	8001650 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7ff f87e 	bl	8001650 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e207      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xc0>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff f86e 	bl	8001650 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002578:	f7ff f86a 	bl	8001650 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e1f3      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b51      	ldr	r3, [pc, #324]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0xe8>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d063      	beq.n	800266e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025a6:	4b4a      	ldr	r3, [pc, #296]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025be:	4b44      	ldr	r3, [pc, #272]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1c7      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b3b      	ldr	r3, [pc, #236]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e03a      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d020      	beq.n	8002642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b34      	ldr	r3, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002602:	2201      	movs	r2, #1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002606:	f7ff f823 	bl	8001650 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260e:	f7ff f81f 	bl	8001650 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e1a8      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262c:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4925      	ldr	r1, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 800263c:	4313      	orrs	r3, r2
 800263e:	600b      	str	r3, [r1, #0]
 8002640:	e015      	b.n	800266e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002642:	4b24      	ldr	r3, [pc, #144]	; (80026d4 <HAL_RCC_OscConfig+0x244>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002648:	f7ff f802 	bl	8001650 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe fffe 	bl	8001650 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e187      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d036      	beq.n	80026e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d016      	beq.n	80026b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_RCC_OscConfig+0x248>)
 8002684:	2201      	movs	r2, #1
 8002686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe ffe2 	bl	8001650 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002690:	f7fe ffde 	bl	8001650 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e167      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCC_OscConfig+0x240>)
 80026a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x200>
 80026ae:	e01b      	b.n	80026e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <HAL_RCC_OscConfig+0x248>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe ffcb 	bl	8001650 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026bc:	e00e      	b.n	80026dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026be:	f7fe ffc7 	bl	8001650 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d907      	bls.n	80026dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e150      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	42470000 	.word	0x42470000
 80026d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b88      	ldr	r3, [pc, #544]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ea      	bne.n	80026be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8097 	beq.w	8002824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b81      	ldr	r3, [pc, #516]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a7c      	ldr	r2, [pc, #496]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b7a      	ldr	r3, [pc, #488]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002722:	2301      	movs	r3, #1
 8002724:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b77      	ldr	r3, [pc, #476]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d118      	bne.n	8002764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002732:	4b74      	ldr	r3, [pc, #464]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a73      	ldr	r2, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 8002738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800273c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273e:	f7fe ff87 	bl	8001650 <HAL_GetTick>
 8002742:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002746:	f7fe ff83 	bl	8001650 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e10c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002758:	4b6a      	ldr	r3, [pc, #424]	; (8002904 <HAL_RCC_OscConfig+0x474>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d106      	bne.n	800277a <HAL_RCC_OscConfig+0x2ea>
 800276c:	4b64      	ldr	r3, [pc, #400]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002770:	4a63      	ldr	r2, [pc, #396]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	; 0x70
 8002778:	e01c      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d10c      	bne.n	800279c <HAL_RCC_OscConfig+0x30c>
 8002782:	4b5f      	ldr	r3, [pc, #380]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	4a5e      	ldr	r2, [pc, #376]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	6713      	str	r3, [r2, #112]	; 0x70
 800278e:	4b5c      	ldr	r3, [pc, #368]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	4a5b      	ldr	r2, [pc, #364]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6713      	str	r3, [r2, #112]	; 0x70
 800279a:	e00b      	b.n	80027b4 <HAL_RCC_OscConfig+0x324>
 800279c:	4b58      	ldr	r3, [pc, #352]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	6713      	str	r3, [r2, #112]	; 0x70
 80027a8:	4b55      	ldr	r3, [pc, #340]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a54      	ldr	r2, [pc, #336]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027ae:	f023 0304 	bic.w	r3, r3, #4
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe ff48 	bl	8001650 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe ff44 	bl	8001650 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e0cb      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b49      	ldr	r3, [pc, #292]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCC_OscConfig+0x334>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e8:	f7fe ff32 	bl	8001650 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027f0:	f7fe ff2e 	bl	8001650 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0b5      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002806:	4b3e      	ldr	r3, [pc, #248]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ee      	bne.n	80027f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d105      	bne.n	8002824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	4a38      	ldr	r2, [pc, #224]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002822:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a1 	beq.w	8002970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282e:	4b34      	ldr	r3, [pc, #208]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d05c      	beq.n	80028f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d141      	bne.n	80028c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002842:	4b31      	ldr	r3, [pc, #196]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe ff02 	bl	8001650 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002850:	f7fe fefe 	bl	8001650 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e087      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f0      	bne.n	8002850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69da      	ldr	r2, [r3, #28]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002884:	085b      	lsrs	r3, r3, #1
 8002886:	3b01      	subs	r3, #1
 8002888:	041b      	lsls	r3, r3, #16
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	061b      	lsls	r3, r3, #24
 8002892:	491b      	ldr	r1, [pc, #108]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002898:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 800289a:	2201      	movs	r2, #1
 800289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800289e:	f7fe fed7 	bl	8001650 <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a6:	f7fe fed3 	bl	8001650 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e05c      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x416>
 80028c4:	e054      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c6:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_RCC_OscConfig+0x478>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028cc:	f7fe fec0 	bl	8001650 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d4:	f7fe febc 	bl	8001650 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e045      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_OscConfig+0x470>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x444>
 80028f2:	e03d      	b.n	8002970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e038      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
 8002900:	40023800 	.word	0x40023800
 8002904:	40007000 	.word	0x40007000
 8002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4ec>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d028      	beq.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d121      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002932:	429a      	cmp	r2, r3
 8002934:	d11a      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002944:	4293      	cmp	r3, r2
 8002946:	d111      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d107      	bne.n	800296c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0cc      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002994:	4b68      	ldr	r3, [pc, #416]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d90c      	bls.n	80029bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029aa:	4b63      	ldr	r3, [pc, #396]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0b8      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d020      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a58      	ldr	r2, [pc, #352]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029ec:	4b53      	ldr	r3, [pc, #332]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	4a52      	ldr	r2, [pc, #328]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f8:	4b50      	ldr	r3, [pc, #320]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	494d      	ldr	r1, [pc, #308]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d044      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d107      	bne.n	8002a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d119      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e07f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d107      	bne.n	8002a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e06f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e067      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5e:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4934      	ldr	r1, [pc, #208]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a70:	f7fe fdee 	bl	8001650 <HAL_GetTick>
 8002a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a78:	f7fe fdea 	bl	8001650 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e04f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 020c 	and.w	r2, r3, #12
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d1eb      	bne.n	8002a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d20c      	bcs.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d001      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e032      	b.n	8002b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	4916      	ldr	r1, [pc, #88]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d009      	beq.n	8002b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b06:	f000 f821 	bl	8002b4c <HAL_RCC_GetSysClockFreq>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	490a      	ldr	r1, [pc, #40]	; (8002b40 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	5ccb      	ldrb	r3, [r1, r3]
 8002b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1e:	4a09      	ldr	r2, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <HAL_RCC_ClockConfig+0x1c8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe fd4e 	bl	80015c8 <HAL_InitTick>

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023c00 	.word	0x40023c00
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	08004fac 	.word	0x08004fac
 8002b44:	20000000 	.word	0x20000000
 8002b48:	20000004 	.word	0x20000004

08002b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b50:	b094      	sub	sp, #80	; 0x50
 8002b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	647b      	str	r3, [r7, #68]	; 0x44
 8002b58:	2300      	movs	r3, #0
 8002b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b64:	4b79      	ldr	r3, [pc, #484]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d00d      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x40>
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	f200 80e1 	bhi.w	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b7e:	e0db      	b.n	8002d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b73      	ldr	r3, [pc, #460]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b82:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b84:	e0db      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b6f      	ldr	r3, [pc, #444]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d063      	beq.n	8002c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	2200      	movs	r2, #0
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34
 8002bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	462b      	mov	r3, r5
 8002bc2:	f04f 0000 	mov.w	r0, #0
 8002bc6:	f04f 0100 	mov.w	r1, #0
 8002bca:	0159      	lsls	r1, r3, #5
 8002bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd0:	0150      	lsls	r0, r2, #5
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4621      	mov	r1, r4
 8002bd8:	1a51      	subs	r1, r2, r1
 8002bda:	6139      	str	r1, [r7, #16]
 8002bdc:	4629      	mov	r1, r5
 8002bde:	eb63 0301 	sbc.w	r3, r3, r1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	018b      	lsls	r3, r1, #6
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	018a      	lsls	r2, r1, #6
 8002bfe:	4651      	mov	r1, sl
 8002c00:	ebb2 0801 	subs.w	r8, r2, r1
 8002c04:	4659      	mov	r1, fp
 8002c06:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c1e:	4690      	mov	r8, r2
 8002c20:	4699      	mov	r9, r3
 8002c22:	4623      	mov	r3, r4
 8002c24:	eb18 0303 	adds.w	r3, r8, r3
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	462b      	mov	r3, r5
 8002c2c:	eb49 0303 	adc.w	r3, r9, r3
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c3e:	4629      	mov	r1, r5
 8002c40:	024b      	lsls	r3, r1, #9
 8002c42:	4621      	mov	r1, r4
 8002c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c48:	4621      	mov	r1, r4
 8002c4a:	024a      	lsls	r2, r1, #9
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c52:	2200      	movs	r2, #0
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c5c:	f7fd fabc 	bl	80001d8 <__aeabi_uldivmod>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4613      	mov	r3, r2
 8002c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c68:	e058      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6a:	4b38      	ldr	r3, [pc, #224]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	099b      	lsrs	r3, r3, #6
 8002c70:	2200      	movs	r2, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	4611      	mov	r1, r2
 8002c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c84:	4642      	mov	r2, r8
 8002c86:	464b      	mov	r3, r9
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0159      	lsls	r1, r3, #5
 8002c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c96:	0150      	lsls	r0, r2, #5
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	f04f 0300 	mov.w	r3, #0
 8002ccc:	00eb      	lsls	r3, r5, #3
 8002cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd2:	00e2      	lsls	r2, r4, #3
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	461d      	mov	r5, r3
 8002cd8:	4643      	mov	r3, r8
 8002cda:	18e3      	adds	r3, r4, r3
 8002cdc:	603b      	str	r3, [r7, #0]
 8002cde:	464b      	mov	r3, r9
 8002ce0:	eb45 0303 	adc.w	r3, r5, r3
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf2:	4629      	mov	r1, r5
 8002cf4:	028b      	lsls	r3, r1, #10
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	028a      	lsls	r2, r1, #10
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	61fa      	str	r2, [r7, #28]
 8002d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d10:	f7fd fa62 	bl	80001d8 <__aeabi_uldivmod>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0c1b      	lsrs	r3, r3, #16
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	3301      	adds	r3, #1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d36:	e002      	b.n	8002d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3750      	adds	r7, #80	; 0x50
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	007a1200 	.word	0x007a1200

08002d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e041      	b.n	8002dee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f94a 	bl	8001018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4619      	mov	r1, r3
 8002d96:	4610      	mov	r0, r2
 8002d98:	f000 fe72 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e041      	b.n	8002e8c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d106      	bne.n	8002e22 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7fe f873 	bl	8000f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2202      	movs	r2, #2
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	4619      	mov	r1, r3
 8002e34:	4610      	mov	r0, r2
 8002e36:	f000 fe23 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e041      	b.n	8002f2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f839 	bl	8002f32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 fdd4 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
	...

08002f48 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_IC_Start+0x1a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	e013      	b.n	8002f8a <HAL_TIM_IC_Start+0x42>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b04      	cmp	r3, #4
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_IC_Start+0x2a>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e00b      	b.n	8002f8a <HAL_TIM_IC_Start+0x42>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d104      	bne.n	8002f82 <HAL_TIM_IC_Start+0x3a>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	e003      	b.n	8002f8a <HAL_TIM_IC_Start+0x42>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <HAL_TIM_IC_Start+0x54>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e013      	b.n	8002fc4 <HAL_TIM_IC_Start+0x7c>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d104      	bne.n	8002fac <HAL_TIM_IC_Start+0x64>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	e00b      	b.n	8002fc4 <HAL_TIM_IC_Start+0x7c>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d104      	bne.n	8002fbc <HAL_TIM_IC_Start+0x74>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e003      	b.n	8002fc4 <HAL_TIM_IC_Start+0x7c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d102      	bne.n	8002fd2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fcc:	7bbb      	ldrb	r3, [r7, #14]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d001      	beq.n	8002fd6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e077      	b.n	80030c6 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <HAL_TIM_IC_Start+0x9e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe4:	e013      	b.n	800300e <HAL_TIM_IC_Start+0xc6>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d104      	bne.n	8002ff6 <HAL_TIM_IC_Start+0xae>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff4:	e00b      	b.n	800300e <HAL_TIM_IC_Start+0xc6>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d104      	bne.n	8003006 <HAL_TIM_IC_Start+0xbe>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003004:	e003      	b.n	800300e <HAL_TIM_IC_Start+0xc6>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d104      	bne.n	800301e <HAL_TIM_IC_Start+0xd6>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800301c:	e013      	b.n	8003046 <HAL_TIM_IC_Start+0xfe>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b04      	cmp	r3, #4
 8003022:	d104      	bne.n	800302e <HAL_TIM_IC_Start+0xe6>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800302c:	e00b      	b.n	8003046 <HAL_TIM_IC_Start+0xfe>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d104      	bne.n	800303e <HAL_TIM_IC_Start+0xf6>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800303c:	e003      	b.n	8003046 <HAL_TIM_IC_Start+0xfe>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2202      	movs	r2, #2
 8003042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	6839      	ldr	r1, [r7, #0]
 800304e:	4618      	mov	r0, r3
 8003050:	f001 f8da 	bl	8004208 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a1d      	ldr	r2, [pc, #116]	; (80030d0 <HAL_TIM_IC_Start+0x188>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d018      	beq.n	8003090 <HAL_TIM_IC_Start+0x148>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d013      	beq.n	8003090 <HAL_TIM_IC_Start+0x148>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_TIM_IC_Start+0x18c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00e      	beq.n	8003090 <HAL_TIM_IC_Start+0x148>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIM_IC_Start+0x190>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_TIM_IC_Start+0x148>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_TIM_IC_Start+0x194>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d004      	beq.n	8003090 <HAL_TIM_IC_Start+0x148>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_TIM_IC_Start+0x198>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d111      	bne.n	80030b4 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b06      	cmp	r3, #6
 80030a0:	d010      	beq.n	80030c4 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 0201 	orr.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40010000 	.word	0x40010000
 80030d4:	40000400 	.word	0x40000400
 80030d8:	40000800 	.word	0x40000800
 80030dc:	40000c00 	.word	0x40000c00
 80030e0:	40014000 	.word	0x40014000

080030e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e097      	b.n	8003228 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d106      	bne.n	8003112 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fd ff1d 	bl	8000f4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003128:	f023 0307 	bic.w	r3, r3, #7
 800312c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	4619      	mov	r1, r3
 8003138:	4610      	mov	r0, r2
 800313a:	f000 fca1 	bl	8003a80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003166:	f023 0303 	bic.w	r3, r3, #3
 800316a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	4313      	orrs	r3, r2
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003184:	f023 030c 	bic.w	r3, r3, #12
 8003188:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003190:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	021b      	lsls	r3, r3, #8
 80031a0:	4313      	orrs	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	011a      	lsls	r2, r3, #4
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6a1b      	ldr	r3, [r3, #32]
 80031b2:	031b      	lsls	r3, r3, #12
 80031b4:	4313      	orrs	r3, r2
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80031c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80031ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	4313      	orrs	r3, r2
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003240:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003248:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003250:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003258:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d110      	bne.n	8003282 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d102      	bne.n	800326c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003266:	7b7b      	ldrb	r3, [r7, #13]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d001      	beq.n	8003270 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e069      	b.n	8003344 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	e031      	b.n	80032e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d110      	bne.n	80032aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003288:	7bbb      	ldrb	r3, [r7, #14]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d102      	bne.n	8003294 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d001      	beq.n	8003298 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e055      	b.n	8003344 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032a8:	e01d      	b.n	80032e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d108      	bne.n	80032c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b0:	7bbb      	ldrb	r3, [r7, #14]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d102      	bne.n	80032c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032bc:	7b3b      	ldrb	r3, [r7, #12]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d001      	beq.n	80032c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e03e      	b.n	8003344 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_TIM_Encoder_Start+0xc4>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d008      	beq.n	8003304 <HAL_TIM_Encoder_Start+0xd4>
 80032f2:	e00f      	b.n	8003314 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f000 ff83 	bl	8004208 <TIM_CCxChannelCmd>
      break;
 8003302:	e016      	b.n	8003332 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	2104      	movs	r1, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f000 ff7b 	bl	8004208 <TIM_CCxChannelCmd>
      break;
 8003312:	e00e      	b.n	8003332 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	2100      	movs	r1, #0
 800331c:	4618      	mov	r0, r3
 800331e:	f000 ff73 	bl	8004208 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	2104      	movs	r1, #4
 800332a:	4618      	mov	r0, r3
 800332c:	f000 ff6c 	bl	8004208 <TIM_CCxChannelCmd>
      break;
 8003330:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0201 	orr.w	r2, r2, #1
 8003340:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b02      	cmp	r3, #2
 8003360:	d122      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b02      	cmp	r3, #2
 800336e:	d11b      	bne.n	80033a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f06f 0202 	mvn.w	r2, #2
 8003378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd ff0c 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 8003394:	e005      	b.n	80033a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 fb54 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fb5b 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d122      	bne.n	80033fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	d11b      	bne.n	80033fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0204 	mvn.w	r2, #4
 80033cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7fd fee2 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 80033e8:	e005      	b.n	80033f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fb2a 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 fb31 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b08      	cmp	r3, #8
 8003408:	d122      	bne.n	8003450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d11b      	bne.n	8003450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0208 	mvn.w	r2, #8
 8003420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2204      	movs	r2, #4
 8003426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd feb8 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 800343c:	e005      	b.n	800344a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fb00 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb07 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	f003 0310 	and.w	r3, r3, #16
 800345a:	2b10      	cmp	r3, #16
 800345c:	d122      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0310 	and.w	r3, r3, #16
 8003468:	2b10      	cmp	r3, #16
 800346a:	d11b      	bne.n	80034a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0210 	mvn.w	r2, #16
 8003474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2208      	movs	r2, #8
 800347a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd fe8e 	bl	80011ac <HAL_TIM_IC_CaptureCallback>
 8003490:	e005      	b.n	800349e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fad6 	bl	8003a44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 fadd 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d10e      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0201 	mvn.w	r2, #1
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fab0 	bl	8003a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b80      	cmp	r3, #128	; 0x80
 80034dc:	d10e      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b80      	cmp	r3, #128	; 0x80
 80034ea:	d107      	bne.n	80034fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 ff76 	bl	80043e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d10e      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003514:	2b40      	cmp	r3, #64	; 0x40
 8003516:	d107      	bne.n	8003528 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 faa2 	bl	8003a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b20      	cmp	r3, #32
 8003534:	d10e      	bne.n	8003554 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b20      	cmp	r3, #32
 8003542:	d107      	bne.n	8003554 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0220 	mvn.w	r2, #32
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 ff40 	bl	80043d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003554:	bf00      	nop
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003568:	2300      	movs	r3, #0
 800356a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003576:	2302      	movs	r3, #2
 8003578:	e088      	b.n	800368c <HAL_TIM_IC_ConfigChannel+0x130>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11b      	bne.n	80035c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6818      	ldr	r0, [r3, #0]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6819      	ldr	r1, [r3, #0]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f000 fc7e 	bl	8003e98 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699a      	ldr	r2, [r3, #24]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020c 	bic.w	r2, r2, #12
 80035aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6999      	ldr	r1, [r3, #24]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	619a      	str	r2, [r3, #24]
 80035be:	e060      	b.n	8003682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d11c      	bne.n	8003600 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f000 fcf6 	bl	8003fc6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699a      	ldr	r2, [r3, #24]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80035e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6999      	ldr	r1, [r3, #24]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	021a      	lsls	r2, r3, #8
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	619a      	str	r2, [r3, #24]
 80035fe:	e040      	b.n	8003682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b08      	cmp	r3, #8
 8003604:	d11b      	bne.n	800363e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	6819      	ldr	r1, [r3, #0]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	f000 fd43 	bl	80040a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69da      	ldr	r2, [r3, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 020c 	bic.w	r2, r2, #12
 8003628:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	69d9      	ldr	r1, [r3, #28]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	430a      	orrs	r2, r1
 800363a:	61da      	str	r2, [r3, #28]
 800363c:	e021      	b.n	8003682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d11c      	bne.n	800367e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f000 fd60 	bl	8004118 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003666:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	69d9      	ldr	r1, [r3, #28]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	61da      	str	r2, [r3, #28]
 800367c:	e001      	b.n	8003682 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800368a:	7dfb      	ldrb	r3, [r7, #23]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0ae      	b.n	8003810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	f200 809f 	bhi.w	8003800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	080036fd 	.word	0x080036fd
 80036cc:	08003801 	.word	0x08003801
 80036d0:	08003801 	.word	0x08003801
 80036d4:	08003801 	.word	0x08003801
 80036d8:	0800373d 	.word	0x0800373d
 80036dc:	08003801 	.word	0x08003801
 80036e0:	08003801 	.word	0x08003801
 80036e4:	08003801 	.word	0x08003801
 80036e8:	0800377f 	.word	0x0800377f
 80036ec:	08003801 	.word	0x08003801
 80036f0:	08003801 	.word	0x08003801
 80036f4:	08003801 	.word	0x08003801
 80036f8:	080037bf 	.word	0x080037bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fa3c 	bl	8003b80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0208 	orr.w	r2, r2, #8
 8003716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0204 	bic.w	r2, r2, #4
 8003726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6999      	ldr	r1, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	619a      	str	r2, [r3, #24]
      break;
 800373a:	e064      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fa82 	bl	8003c4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6999      	ldr	r1, [r3, #24]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	021a      	lsls	r2, r3, #8
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	619a      	str	r2, [r3, #24]
      break;
 800377c:	e043      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68b9      	ldr	r1, [r7, #8]
 8003784:	4618      	mov	r0, r3
 8003786:	f000 facd 	bl	8003d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 0208 	orr.w	r2, r2, #8
 8003798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0204 	bic.w	r2, r2, #4
 80037a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	61da      	str	r2, [r3, #28]
      break;
 80037bc:	e023      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f000 fb17 	bl	8003df8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69d9      	ldr	r1, [r3, #28]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	021a      	lsls	r2, r3, #8
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	61da      	str	r2, [r3, #28]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
      break;
 8003804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIM_ConfigClockSource+0x1c>
 8003830:	2302      	movs	r3, #2
 8003832:	e0b4      	b.n	800399e <HAL_TIM_ConfigClockSource+0x186>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003852:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800385a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386c:	d03e      	beq.n	80038ec <HAL_TIM_ConfigClockSource+0xd4>
 800386e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003872:	f200 8087 	bhi.w	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 8003876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387a:	f000 8086 	beq.w	800398a <HAL_TIM_ConfigClockSource+0x172>
 800387e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003882:	d87f      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 8003884:	2b70      	cmp	r3, #112	; 0x70
 8003886:	d01a      	beq.n	80038be <HAL_TIM_ConfigClockSource+0xa6>
 8003888:	2b70      	cmp	r3, #112	; 0x70
 800388a:	d87b      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 800388c:	2b60      	cmp	r3, #96	; 0x60
 800388e:	d050      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0x11a>
 8003890:	2b60      	cmp	r3, #96	; 0x60
 8003892:	d877      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 8003894:	2b50      	cmp	r3, #80	; 0x50
 8003896:	d03c      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0xfa>
 8003898:	2b50      	cmp	r3, #80	; 0x50
 800389a:	d873      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d058      	beq.n	8003952 <HAL_TIM_ConfigClockSource+0x13a>
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d86f      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 80038a4:	2b30      	cmp	r3, #48	; 0x30
 80038a6:	d064      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	2b30      	cmp	r3, #48	; 0x30
 80038aa:	d86b      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d060      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x15a>
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d867      	bhi.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d05c      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d05a      	beq.n	8003972 <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	e062      	b.n	8003984 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	6899      	ldr	r1, [r3, #8]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f000 fc7b 	bl	80041c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	609a      	str	r2, [r3, #8]
      break;
 80038ea:	e04f      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f000 fc64 	bl	80041c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800390e:	609a      	str	r2, [r3, #8]
      break;
 8003910:	e03c      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f000 fb22 	bl	8003f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2150      	movs	r1, #80	; 0x50
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fc31 	bl	8004192 <TIM_ITRx_SetConfig>
      break;
 8003930:	e02c      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6859      	ldr	r1, [r3, #4]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	461a      	mov	r2, r3
 8003940:	f000 fb7e 	bl	8004040 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2160      	movs	r1, #96	; 0x60
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fc21 	bl	8004192 <TIM_ITRx_SetConfig>
      break;
 8003950:	e01c      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6818      	ldr	r0, [r3, #0]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	6859      	ldr	r1, [r3, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	461a      	mov	r2, r3
 8003960:	f000 fb02 	bl	8003f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2140      	movs	r1, #64	; 0x40
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fc11 	bl	8004192 <TIM_ITRx_SetConfig>
      break;
 8003970:	e00c      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f000 fc08 	bl	8004192 <TIM_ITRx_SetConfig>
      break;
 8003982:	e003      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
      break;
 8003988:	e000      	b.n	800398c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800398a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800399c:	7bfb      	ldrb	r3, [r7, #15]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b085      	sub	sp, #20
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	d831      	bhi.n	8003a20 <HAL_TIM_ReadCapturedValue+0x78>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a21 	.word	0x08003a21
 80039cc:	08003a21 	.word	0x08003a21
 80039d0:	08003a21 	.word	0x08003a21
 80039d4:	08003a03 	.word	0x08003a03
 80039d8:	08003a21 	.word	0x08003a21
 80039dc:	08003a21 	.word	0x08003a21
 80039e0:	08003a21 	.word	0x08003a21
 80039e4:	08003a0d 	.word	0x08003a0d
 80039e8:	08003a21 	.word	0x08003a21
 80039ec:	08003a21 	.word	0x08003a21
 80039f0:	08003a21 	.word	0x08003a21
 80039f4:	08003a17 	.word	0x08003a17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039fe:	60fb      	str	r3, [r7, #12]

      break;
 8003a00:	e00f      	b.n	8003a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	60fb      	str	r3, [r7, #12]

      break;
 8003a0a:	e00a      	b.n	8003a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	60fb      	str	r3, [r7, #12]

      break;
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	60fb      	str	r3, [r7, #12]

      break;
 8003a1e:	e000      	b.n	8003a22 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a20:	bf00      	nop
  }

  return tmpreg;
 8003a22:	68fb      	ldr	r3, [r7, #12]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <TIM_Base_SetConfig+0xe8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <TIM_Base_SetConfig+0xec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <TIM_Base_SetConfig+0xf0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <TIM_Base_SetConfig+0xe8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <TIM_Base_SetConfig+0xec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_Base_SetConfig+0xf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <TIM_Base_SetConfig+0xf4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <TIM_Base_SetConfig+0xf8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <TIM_Base_SetConfig+0xfc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800

08003b80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	f023 0201 	bic.w	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f023 0303 	bic.w	r3, r3, #3
 8003bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f023 0302 	bic.w	r3, r3, #2
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1c      	ldr	r2, [pc, #112]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d10c      	bne.n	8003bf6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0308 	bic.w	r3, r3, #8
 8003be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 0304 	bic.w	r3, r3, #4
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <TIM_OC1_SetConfig+0xc8>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d111      	bne.n	8003c22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	693a      	ldr	r2, [r7, #16]
 8003c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40010000 	.word	0x40010000

08003c4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f023 0210 	bic.w	r2, r3, #16
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a1e      	ldr	r2, [pc, #120]	; (8003d20 <TIM_OC2_SetConfig+0xd4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d10d      	bne.n	8003cc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a15      	ldr	r2, [pc, #84]	; (8003d20 <TIM_OC2_SetConfig+0xd4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d113      	bne.n	8003cf8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	621a      	str	r2, [r3, #32]
}
 8003d12:	bf00      	nop
 8003d14:	371c      	adds	r7, #28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000

08003d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	021b      	lsls	r3, r3, #8
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <TIM_OC3_SetConfig+0xd0>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d10d      	bne.n	8003d9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <TIM_OC3_SetConfig+0xd0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d113      	bne.n	8003dce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	40010000 	.word	0x40010000

08003df8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	031b      	lsls	r3, r3, #12
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a10      	ldr	r2, [pc, #64]	; (8003e94 <TIM_OC4_SetConfig+0x9c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d109      	bne.n	8003e6c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	621a      	str	r2, [r3, #32]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40010000 	.word	0x40010000

08003e98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f023 0201 	bic.w	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a24      	ldr	r2, [pc, #144]	; (8003f54 <TIM_TI1_SetConfig+0xbc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d013      	beq.n	8003eee <TIM_TI1_SetConfig+0x56>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d00f      	beq.n	8003eee <TIM_TI1_SetConfig+0x56>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a21      	ldr	r2, [pc, #132]	; (8003f58 <TIM_TI1_SetConfig+0xc0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_TI1_SetConfig+0x56>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	; (8003f5c <TIM_TI1_SetConfig+0xc4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_TI1_SetConfig+0x56>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	; (8003f60 <TIM_TI1_SetConfig+0xc8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_TI1_SetConfig+0x56>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	; (8003f64 <TIM_TI1_SetConfig+0xcc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d101      	bne.n	8003ef2 <TIM_TI1_SetConfig+0x5a>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <TIM_TI1_SetConfig+0x5c>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d008      	beq.n	8003f0a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	e003      	b.n	8003f12 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f023 030a 	bic.w	r3, r3, #10
 8003f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f003 030a 	and.w	r3, r3, #10
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40014000 	.word	0x40014000

08003f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	f023 0201 	bic.w	r2, r3, #1
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	f023 030a 	bic.w	r3, r3, #10
 8003fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	621a      	str	r2, [r3, #32]
}
 8003fba:	bf00      	nop
 8003fbc:	371c      	adds	r7, #28
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f023 0210 	bic.w	r2, r3, #16
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	031b      	lsls	r3, r3, #12
 800400a:	b29b      	uxth	r3, r3
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004018:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 0210 	bic.w	r2, r3, #16
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800406a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	031b      	lsls	r3, r3, #12
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800407c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	621a      	str	r2, [r3, #32]
}
 8004094:	bf00      	nop
 8004096:	371c      	adds	r7, #28
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	f023 0303 	bic.w	r3, r3, #3
 80040cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	621a      	str	r2, [r3, #32]
}
 800410c:	bf00      	nop
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004144:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004156:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	031b      	lsls	r3, r3, #12
 800415c:	b29b      	uxth	r3, r3
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	4313      	orrs	r3, r2
 8004162:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800416a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f043 0307 	orr.w	r3, r3, #7
 80041b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	021a      	lsls	r2, r3, #8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	371c      	adds	r7, #28
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	f003 031f 	and.w	r3, r3, #31
 800421a:	2201      	movs	r2, #1
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a1a      	ldr	r2, [r3, #32]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	43db      	mvns	r3, r3
 800422a:	401a      	ands	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f003 031f 	and.w	r3, r3, #31
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	fa01 f303 	lsl.w	r3, r1, r3
 8004240:	431a      	orrs	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e050      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042b8:	d013      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a13      	ldr	r2, [pc, #76]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40014000 	.word	0x40014000

08004330 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004348:	2302      	movs	r3, #2
 800434a:	e03d      	b.n	80043c8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4313      	orrs	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4313      	orrs	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <__libc_init_array>:
 80043fc:	b570      	push	{r4, r5, r6, lr}
 80043fe:	4d0d      	ldr	r5, [pc, #52]	; (8004434 <__libc_init_array+0x38>)
 8004400:	4c0d      	ldr	r4, [pc, #52]	; (8004438 <__libc_init_array+0x3c>)
 8004402:	1b64      	subs	r4, r4, r5
 8004404:	10a4      	asrs	r4, r4, #2
 8004406:	2600      	movs	r6, #0
 8004408:	42a6      	cmp	r6, r4
 800440a:	d109      	bne.n	8004420 <__libc_init_array+0x24>
 800440c:	4d0b      	ldr	r5, [pc, #44]	; (800443c <__libc_init_array+0x40>)
 800440e:	4c0c      	ldr	r4, [pc, #48]	; (8004440 <__libc_init_array+0x44>)
 8004410:	f000 fdc0 	bl	8004f94 <_init>
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	2600      	movs	r6, #0
 800441a:	42a6      	cmp	r6, r4
 800441c:	d105      	bne.n	800442a <__libc_init_array+0x2e>
 800441e:	bd70      	pop	{r4, r5, r6, pc}
 8004420:	f855 3b04 	ldr.w	r3, [r5], #4
 8004424:	4798      	blx	r3
 8004426:	3601      	adds	r6, #1
 8004428:	e7ee      	b.n	8004408 <__libc_init_array+0xc>
 800442a:	f855 3b04 	ldr.w	r3, [r5], #4
 800442e:	4798      	blx	r3
 8004430:	3601      	adds	r6, #1
 8004432:	e7f2      	b.n	800441a <__libc_init_array+0x1e>
 8004434:	08005394 	.word	0x08005394
 8004438:	08005394 	.word	0x08005394
 800443c:	08005394 	.word	0x08005394
 8004440:	08005398 	.word	0x08005398

08004444 <memset>:
 8004444:	4402      	add	r2, r0
 8004446:	4603      	mov	r3, r0
 8004448:	4293      	cmp	r3, r2
 800444a:	d100      	bne.n	800444e <memset+0xa>
 800444c:	4770      	bx	lr
 800444e:	f803 1b01 	strb.w	r1, [r3], #1
 8004452:	e7f9      	b.n	8004448 <memset+0x4>

08004454 <cosf>:
 8004454:	ee10 3a10 	vmov	r3, s0
 8004458:	b507      	push	{r0, r1, r2, lr}
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <cosf+0x80>)
 800445c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004460:	4293      	cmp	r3, r2
 8004462:	dc06      	bgt.n	8004472 <cosf+0x1e>
 8004464:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80044d8 <cosf+0x84>
 8004468:	b003      	add	sp, #12
 800446a:	f85d eb04 	ldr.w	lr, [sp], #4
 800446e:	f000 b9b7 	b.w	80047e0 <__kernel_cosf>
 8004472:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004476:	db04      	blt.n	8004482 <cosf+0x2e>
 8004478:	ee30 0a40 	vsub.f32	s0, s0, s0
 800447c:	b003      	add	sp, #12
 800447e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004482:	4668      	mov	r0, sp
 8004484:	f000 f870 	bl	8004568 <__ieee754_rem_pio2f>
 8004488:	f000 0003 	and.w	r0, r0, #3
 800448c:	2801      	cmp	r0, #1
 800448e:	d009      	beq.n	80044a4 <cosf+0x50>
 8004490:	2802      	cmp	r0, #2
 8004492:	d010      	beq.n	80044b6 <cosf+0x62>
 8004494:	b9b0      	cbnz	r0, 80044c4 <cosf+0x70>
 8004496:	eddd 0a01 	vldr	s1, [sp, #4]
 800449a:	ed9d 0a00 	vldr	s0, [sp]
 800449e:	f000 f99f 	bl	80047e0 <__kernel_cosf>
 80044a2:	e7eb      	b.n	800447c <cosf+0x28>
 80044a4:	eddd 0a01 	vldr	s1, [sp, #4]
 80044a8:	ed9d 0a00 	vldr	s0, [sp]
 80044ac:	f000 fc6e 	bl	8004d8c <__kernel_sinf>
 80044b0:	eeb1 0a40 	vneg.f32	s0, s0
 80044b4:	e7e2      	b.n	800447c <cosf+0x28>
 80044b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80044ba:	ed9d 0a00 	vldr	s0, [sp]
 80044be:	f000 f98f 	bl	80047e0 <__kernel_cosf>
 80044c2:	e7f5      	b.n	80044b0 <cosf+0x5c>
 80044c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80044c8:	ed9d 0a00 	vldr	s0, [sp]
 80044cc:	2001      	movs	r0, #1
 80044ce:	f000 fc5d 	bl	8004d8c <__kernel_sinf>
 80044d2:	e7d3      	b.n	800447c <cosf+0x28>
 80044d4:	3f490fd8 	.word	0x3f490fd8
 80044d8:	00000000 	.word	0x00000000

080044dc <sinf>:
 80044dc:	ee10 3a10 	vmov	r3, s0
 80044e0:	b507      	push	{r0, r1, r2, lr}
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <sinf+0x84>)
 80044e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044e8:	4293      	cmp	r3, r2
 80044ea:	dc07      	bgt.n	80044fc <sinf+0x20>
 80044ec:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8004564 <sinf+0x88>
 80044f0:	2000      	movs	r0, #0
 80044f2:	b003      	add	sp, #12
 80044f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80044f8:	f000 bc48 	b.w	8004d8c <__kernel_sinf>
 80044fc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004500:	db04      	blt.n	800450c <sinf+0x30>
 8004502:	ee30 0a40 	vsub.f32	s0, s0, s0
 8004506:	b003      	add	sp, #12
 8004508:	f85d fb04 	ldr.w	pc, [sp], #4
 800450c:	4668      	mov	r0, sp
 800450e:	f000 f82b 	bl	8004568 <__ieee754_rem_pio2f>
 8004512:	f000 0003 	and.w	r0, r0, #3
 8004516:	2801      	cmp	r0, #1
 8004518:	d00a      	beq.n	8004530 <sinf+0x54>
 800451a:	2802      	cmp	r0, #2
 800451c:	d00f      	beq.n	800453e <sinf+0x62>
 800451e:	b9c0      	cbnz	r0, 8004552 <sinf+0x76>
 8004520:	eddd 0a01 	vldr	s1, [sp, #4]
 8004524:	ed9d 0a00 	vldr	s0, [sp]
 8004528:	2001      	movs	r0, #1
 800452a:	f000 fc2f 	bl	8004d8c <__kernel_sinf>
 800452e:	e7ea      	b.n	8004506 <sinf+0x2a>
 8004530:	eddd 0a01 	vldr	s1, [sp, #4]
 8004534:	ed9d 0a00 	vldr	s0, [sp]
 8004538:	f000 f952 	bl	80047e0 <__kernel_cosf>
 800453c:	e7e3      	b.n	8004506 <sinf+0x2a>
 800453e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004542:	ed9d 0a00 	vldr	s0, [sp]
 8004546:	2001      	movs	r0, #1
 8004548:	f000 fc20 	bl	8004d8c <__kernel_sinf>
 800454c:	eeb1 0a40 	vneg.f32	s0, s0
 8004550:	e7d9      	b.n	8004506 <sinf+0x2a>
 8004552:	eddd 0a01 	vldr	s1, [sp, #4]
 8004556:	ed9d 0a00 	vldr	s0, [sp]
 800455a:	f000 f941 	bl	80047e0 <__kernel_cosf>
 800455e:	e7f5      	b.n	800454c <sinf+0x70>
 8004560:	3f490fd8 	.word	0x3f490fd8
 8004564:	00000000 	.word	0x00000000

08004568 <__ieee754_rem_pio2f>:
 8004568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800456a:	ee10 6a10 	vmov	r6, s0
 800456e:	4b8e      	ldr	r3, [pc, #568]	; (80047a8 <__ieee754_rem_pio2f+0x240>)
 8004570:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004574:	429d      	cmp	r5, r3
 8004576:	b087      	sub	sp, #28
 8004578:	eef0 7a40 	vmov.f32	s15, s0
 800457c:	4604      	mov	r4, r0
 800457e:	dc05      	bgt.n	800458c <__ieee754_rem_pio2f+0x24>
 8004580:	2300      	movs	r3, #0
 8004582:	ed80 0a00 	vstr	s0, [r0]
 8004586:	6043      	str	r3, [r0, #4]
 8004588:	2000      	movs	r0, #0
 800458a:	e01a      	b.n	80045c2 <__ieee754_rem_pio2f+0x5a>
 800458c:	4b87      	ldr	r3, [pc, #540]	; (80047ac <__ieee754_rem_pio2f+0x244>)
 800458e:	429d      	cmp	r5, r3
 8004590:	dc46      	bgt.n	8004620 <__ieee754_rem_pio2f+0xb8>
 8004592:	2e00      	cmp	r6, #0
 8004594:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80047b0 <__ieee754_rem_pio2f+0x248>
 8004598:	4b86      	ldr	r3, [pc, #536]	; (80047b4 <__ieee754_rem_pio2f+0x24c>)
 800459a:	f025 050f 	bic.w	r5, r5, #15
 800459e:	dd1f      	ble.n	80045e0 <__ieee754_rem_pio2f+0x78>
 80045a0:	429d      	cmp	r5, r3
 80045a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80045a6:	d00e      	beq.n	80045c6 <__ieee754_rem_pio2f+0x5e>
 80045a8:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80047b8 <__ieee754_rem_pio2f+0x250>
 80045ac:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80045b0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80045b4:	ed80 0a00 	vstr	s0, [r0]
 80045b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045bc:	2001      	movs	r0, #1
 80045be:	edc4 7a01 	vstr	s15, [r4, #4]
 80045c2:	b007      	add	sp, #28
 80045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80047bc <__ieee754_rem_pio2f+0x254>
 80045ca:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80047c0 <__ieee754_rem_pio2f+0x258>
 80045ce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80045d2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80045d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80045da:	edc0 6a00 	vstr	s13, [r0]
 80045de:	e7eb      	b.n	80045b8 <__ieee754_rem_pio2f+0x50>
 80045e0:	429d      	cmp	r5, r3
 80045e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80045e6:	d00e      	beq.n	8004606 <__ieee754_rem_pio2f+0x9e>
 80045e8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80047b8 <__ieee754_rem_pio2f+0x250>
 80045ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80045f0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80045f4:	ed80 0a00 	vstr	s0, [r0]
 80045f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	edc4 7a01 	vstr	s15, [r4, #4]
 8004604:	e7dd      	b.n	80045c2 <__ieee754_rem_pio2f+0x5a>
 8004606:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80047bc <__ieee754_rem_pio2f+0x254>
 800460a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80047c0 <__ieee754_rem_pio2f+0x258>
 800460e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004612:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004616:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800461a:	edc0 6a00 	vstr	s13, [r0]
 800461e:	e7eb      	b.n	80045f8 <__ieee754_rem_pio2f+0x90>
 8004620:	4b68      	ldr	r3, [pc, #416]	; (80047c4 <__ieee754_rem_pio2f+0x25c>)
 8004622:	429d      	cmp	r5, r3
 8004624:	dc72      	bgt.n	800470c <__ieee754_rem_pio2f+0x1a4>
 8004626:	f000 fbf9 	bl	8004e1c <fabsf>
 800462a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80047c8 <__ieee754_rem_pio2f+0x260>
 800462e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004632:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800463a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800463e:	ee17 0a90 	vmov	r0, s15
 8004642:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80047b0 <__ieee754_rem_pio2f+0x248>
 8004646:	eea7 0a67 	vfms.f32	s0, s14, s15
 800464a:	281f      	cmp	r0, #31
 800464c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80047b8 <__ieee754_rem_pio2f+0x250>
 8004650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004654:	eeb1 6a47 	vneg.f32	s12, s14
 8004658:	ee70 6a67 	vsub.f32	s13, s0, s15
 800465c:	ee16 2a90 	vmov	r2, s13
 8004660:	dc1c      	bgt.n	800469c <__ieee754_rem_pio2f+0x134>
 8004662:	495a      	ldr	r1, [pc, #360]	; (80047cc <__ieee754_rem_pio2f+0x264>)
 8004664:	1e47      	subs	r7, r0, #1
 8004666:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800466a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800466e:	428b      	cmp	r3, r1
 8004670:	d014      	beq.n	800469c <__ieee754_rem_pio2f+0x134>
 8004672:	6022      	str	r2, [r4, #0]
 8004674:	ed94 7a00 	vldr	s14, [r4]
 8004678:	ee30 0a47 	vsub.f32	s0, s0, s14
 800467c:	2e00      	cmp	r6, #0
 800467e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004682:	ed84 0a01 	vstr	s0, [r4, #4]
 8004686:	da9c      	bge.n	80045c2 <__ieee754_rem_pio2f+0x5a>
 8004688:	eeb1 7a47 	vneg.f32	s14, s14
 800468c:	eeb1 0a40 	vneg.f32	s0, s0
 8004690:	ed84 7a00 	vstr	s14, [r4]
 8004694:	ed84 0a01 	vstr	s0, [r4, #4]
 8004698:	4240      	negs	r0, r0
 800469a:	e792      	b.n	80045c2 <__ieee754_rem_pio2f+0x5a>
 800469c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80046a0:	15eb      	asrs	r3, r5, #23
 80046a2:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80046a6:	2d08      	cmp	r5, #8
 80046a8:	dde3      	ble.n	8004672 <__ieee754_rem_pio2f+0x10a>
 80046aa:	eddf 7a44 	vldr	s15, [pc, #272]	; 80047bc <__ieee754_rem_pio2f+0x254>
 80046ae:	eddf 5a44 	vldr	s11, [pc, #272]	; 80047c0 <__ieee754_rem_pio2f+0x258>
 80046b2:	eef0 6a40 	vmov.f32	s13, s0
 80046b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80046ba:	ee30 0a66 	vsub.f32	s0, s0, s13
 80046be:	eea6 0a27 	vfma.f32	s0, s12, s15
 80046c2:	eef0 7a40 	vmov.f32	s15, s0
 80046c6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80046ca:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80046ce:	ee15 2a90 	vmov	r2, s11
 80046d2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80046d6:	1a5b      	subs	r3, r3, r1
 80046d8:	2b19      	cmp	r3, #25
 80046da:	dc04      	bgt.n	80046e6 <__ieee754_rem_pio2f+0x17e>
 80046dc:	edc4 5a00 	vstr	s11, [r4]
 80046e0:	eeb0 0a66 	vmov.f32	s0, s13
 80046e4:	e7c6      	b.n	8004674 <__ieee754_rem_pio2f+0x10c>
 80046e6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80047d0 <__ieee754_rem_pio2f+0x268>
 80046ea:	eeb0 0a66 	vmov.f32	s0, s13
 80046ee:	eea6 0a25 	vfma.f32	s0, s12, s11
 80046f2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80046f6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80047d4 <__ieee754_rem_pio2f+0x26c>
 80046fa:	eee6 7a25 	vfma.f32	s15, s12, s11
 80046fe:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004702:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004706:	ed84 7a00 	vstr	s14, [r4]
 800470a:	e7b3      	b.n	8004674 <__ieee754_rem_pio2f+0x10c>
 800470c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004710:	db06      	blt.n	8004720 <__ieee754_rem_pio2f+0x1b8>
 8004712:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004716:	edc0 7a01 	vstr	s15, [r0, #4]
 800471a:	edc0 7a00 	vstr	s15, [r0]
 800471e:	e733      	b.n	8004588 <__ieee754_rem_pio2f+0x20>
 8004720:	15ea      	asrs	r2, r5, #23
 8004722:	3a86      	subs	r2, #134	; 0x86
 8004724:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004730:	eddf 6a29 	vldr	s13, [pc, #164]	; 80047d8 <__ieee754_rem_pio2f+0x270>
 8004734:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800473c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004740:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004744:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004748:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800474c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004750:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004754:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004758:	eef5 7a40 	vcmp.f32	s15, #0.0
 800475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004760:	edcd 7a05 	vstr	s15, [sp, #20]
 8004764:	d11e      	bne.n	80047a4 <__ieee754_rem_pio2f+0x23c>
 8004766:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	bf14      	ite	ne
 8004770:	2302      	movne	r3, #2
 8004772:	2301      	moveq	r3, #1
 8004774:	4919      	ldr	r1, [pc, #100]	; (80047dc <__ieee754_rem_pio2f+0x274>)
 8004776:	9101      	str	r1, [sp, #4]
 8004778:	2102      	movs	r1, #2
 800477a:	9100      	str	r1, [sp, #0]
 800477c:	a803      	add	r0, sp, #12
 800477e:	4621      	mov	r1, r4
 8004780:	f000 f88e 	bl	80048a0 <__kernel_rem_pio2f>
 8004784:	2e00      	cmp	r6, #0
 8004786:	f6bf af1c 	bge.w	80045c2 <__ieee754_rem_pio2f+0x5a>
 800478a:	edd4 7a00 	vldr	s15, [r4]
 800478e:	eef1 7a67 	vneg.f32	s15, s15
 8004792:	edc4 7a00 	vstr	s15, [r4]
 8004796:	edd4 7a01 	vldr	s15, [r4, #4]
 800479a:	eef1 7a67 	vneg.f32	s15, s15
 800479e:	edc4 7a01 	vstr	s15, [r4, #4]
 80047a2:	e779      	b.n	8004698 <__ieee754_rem_pio2f+0x130>
 80047a4:	2303      	movs	r3, #3
 80047a6:	e7e5      	b.n	8004774 <__ieee754_rem_pio2f+0x20c>
 80047a8:	3f490fd8 	.word	0x3f490fd8
 80047ac:	4016cbe3 	.word	0x4016cbe3
 80047b0:	3fc90f80 	.word	0x3fc90f80
 80047b4:	3fc90fd0 	.word	0x3fc90fd0
 80047b8:	37354443 	.word	0x37354443
 80047bc:	37354400 	.word	0x37354400
 80047c0:	2e85a308 	.word	0x2e85a308
 80047c4:	43490f80 	.word	0x43490f80
 80047c8:	3f22f984 	.word	0x3f22f984
 80047cc:	08004fbc 	.word	0x08004fbc
 80047d0:	2e85a300 	.word	0x2e85a300
 80047d4:	248d3132 	.word	0x248d3132
 80047d8:	43800000 	.word	0x43800000
 80047dc:	0800503c 	.word	0x0800503c

080047e0 <__kernel_cosf>:
 80047e0:	ee10 3a10 	vmov	r3, s0
 80047e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047e8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047ec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80047f0:	da05      	bge.n	80047fe <__kernel_cosf+0x1e>
 80047f2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047f6:	ee17 2a90 	vmov	r2, s15
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d03d      	beq.n	800487a <__kernel_cosf+0x9a>
 80047fe:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004802:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004880 <__kernel_cosf+0xa0>
 8004806:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004884 <__kernel_cosf+0xa4>
 800480a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004888 <__kernel_cosf+0xa8>
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <__kernel_cosf+0xac>)
 8004810:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004814:	4293      	cmp	r3, r2
 8004816:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004890 <__kernel_cosf+0xb0>
 800481a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800481e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004894 <__kernel_cosf+0xb4>
 8004822:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004826:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004898 <__kernel_cosf+0xb8>
 800482a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800482e:	eeb0 7a66 	vmov.f32	s14, s13
 8004832:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004836:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800483a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800483e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004842:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004846:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800484a:	dc04      	bgt.n	8004856 <__kernel_cosf+0x76>
 800484c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004850:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004854:	4770      	bx	lr
 8004856:	4a11      	ldr	r2, [pc, #68]	; (800489c <__kernel_cosf+0xbc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	bfda      	itte	le
 800485c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004860:	ee06 3a90 	vmovle	s13, r3
 8004864:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004868:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800486c:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004870:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004874:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004878:	4770      	bx	lr
 800487a:	eeb0 0a46 	vmov.f32	s0, s12
 800487e:	4770      	bx	lr
 8004880:	ad47d74e 	.word	0xad47d74e
 8004884:	310f74f6 	.word	0x310f74f6
 8004888:	3d2aaaab 	.word	0x3d2aaaab
 800488c:	3e999999 	.word	0x3e999999
 8004890:	b493f27c 	.word	0xb493f27c
 8004894:	37d00d01 	.word	0x37d00d01
 8004898:	bab60b61 	.word	0xbab60b61
 800489c:	3f480000 	.word	0x3f480000

080048a0 <__kernel_rem_pio2f>:
 80048a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a4:	ed2d 8b04 	vpush	{d8-d9}
 80048a8:	b0d9      	sub	sp, #356	; 0x164
 80048aa:	4688      	mov	r8, r1
 80048ac:	9002      	str	r0, [sp, #8]
 80048ae:	49bb      	ldr	r1, [pc, #748]	; (8004b9c <__kernel_rem_pio2f+0x2fc>)
 80048b0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80048b8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80048bc:	1e59      	subs	r1, r3, #1
 80048be:	1d13      	adds	r3, r2, #4
 80048c0:	db27      	blt.n	8004912 <__kernel_rem_pio2f+0x72>
 80048c2:	f1b2 0b03 	subs.w	fp, r2, #3
 80048c6:	bf48      	it	mi
 80048c8:	f102 0b04 	addmi.w	fp, r2, #4
 80048cc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80048d0:	1c45      	adds	r5, r0, #1
 80048d2:	00ec      	lsls	r4, r5, #3
 80048d4:	1a47      	subs	r7, r0, r1
 80048d6:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8004bac <__kernel_rem_pio2f+0x30c>
 80048da:	9403      	str	r4, [sp, #12]
 80048dc:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80048e0:	eb0a 0c01 	add.w	ip, sl, r1
 80048e4:	ae1c      	add	r6, sp, #112	; 0x70
 80048e6:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80048ea:	2400      	movs	r4, #0
 80048ec:	4564      	cmp	r4, ip
 80048ee:	dd12      	ble.n	8004916 <__kernel_rem_pio2f+0x76>
 80048f0:	9b01      	ldr	r3, [sp, #4]
 80048f2:	ac1c      	add	r4, sp, #112	; 0x70
 80048f4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80048f8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80048fc:	f04f 0c00 	mov.w	ip, #0
 8004900:	45d4      	cmp	ip, sl
 8004902:	dc27      	bgt.n	8004954 <__kernel_rem_pio2f+0xb4>
 8004904:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004908:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8004bac <__kernel_rem_pio2f+0x30c>
 800490c:	4627      	mov	r7, r4
 800490e:	2600      	movs	r6, #0
 8004910:	e016      	b.n	8004940 <__kernel_rem_pio2f+0xa0>
 8004912:	2000      	movs	r0, #0
 8004914:	e7dc      	b.n	80048d0 <__kernel_rem_pio2f+0x30>
 8004916:	42e7      	cmn	r7, r4
 8004918:	bf5d      	ittte	pl
 800491a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800491e:	ee07 3a90 	vmovpl	s15, r3
 8004922:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004926:	eef0 7a47 	vmovmi.f32	s15, s14
 800492a:	ece6 7a01 	vstmia	r6!, {s15}
 800492e:	3401      	adds	r4, #1
 8004930:	e7dc      	b.n	80048ec <__kernel_rem_pio2f+0x4c>
 8004932:	ecf9 6a01 	vldmia	r9!, {s13}
 8004936:	ed97 7a00 	vldr	s14, [r7]
 800493a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800493e:	3601      	adds	r6, #1
 8004940:	428e      	cmp	r6, r1
 8004942:	f1a7 0704 	sub.w	r7, r7, #4
 8004946:	ddf4      	ble.n	8004932 <__kernel_rem_pio2f+0x92>
 8004948:	eceb 7a01 	vstmia	fp!, {s15}
 800494c:	f10c 0c01 	add.w	ip, ip, #1
 8004950:	3404      	adds	r4, #4
 8004952:	e7d5      	b.n	8004900 <__kernel_rem_pio2f+0x60>
 8004954:	ab08      	add	r3, sp, #32
 8004956:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800495a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8004ba8 <__kernel_rem_pio2f+0x308>
 800495e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8004ba4 <__kernel_rem_pio2f+0x304>
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8004968:	4656      	mov	r6, sl
 800496a:	00b3      	lsls	r3, r6, #2
 800496c:	9305      	str	r3, [sp, #20]
 800496e:	ab58      	add	r3, sp, #352	; 0x160
 8004970:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004974:	ac08      	add	r4, sp, #32
 8004976:	ab44      	add	r3, sp, #272	; 0x110
 8004978:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800497c:	46a4      	mov	ip, r4
 800497e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8004982:	4637      	mov	r7, r6
 8004984:	2f00      	cmp	r7, #0
 8004986:	f1a0 0004 	sub.w	r0, r0, #4
 800498a:	dc4f      	bgt.n	8004a2c <__kernel_rem_pio2f+0x18c>
 800498c:	4628      	mov	r0, r5
 800498e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004992:	f000 fa8d 	bl	8004eb0 <scalbnf>
 8004996:	eeb0 8a40 	vmov.f32	s16, s0
 800499a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800499e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80049a2:	f000 fa43 	bl	8004e2c <floorf>
 80049a6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80049aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80049b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80049b8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80049bc:	ee17 9a90 	vmov	r9, s15
 80049c0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80049c4:	dd44      	ble.n	8004a50 <__kernel_rem_pio2f+0x1b0>
 80049c6:	f106 3cff 	add.w	ip, r6, #4294967295
 80049ca:	ab08      	add	r3, sp, #32
 80049cc:	f1c5 0e08 	rsb	lr, r5, #8
 80049d0:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80049d4:	fa47 f00e 	asr.w	r0, r7, lr
 80049d8:	4481      	add	r9, r0
 80049da:	fa00 f00e 	lsl.w	r0, r0, lr
 80049de:	1a3f      	subs	r7, r7, r0
 80049e0:	f1c5 0007 	rsb	r0, r5, #7
 80049e4:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80049e8:	4107      	asrs	r7, r0
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	dd3f      	ble.n	8004a6e <__kernel_rem_pio2f+0x1ce>
 80049ee:	f04f 0e00 	mov.w	lr, #0
 80049f2:	f109 0901 	add.w	r9, r9, #1
 80049f6:	4673      	mov	r3, lr
 80049f8:	4576      	cmp	r6, lr
 80049fa:	dc6b      	bgt.n	8004ad4 <__kernel_rem_pio2f+0x234>
 80049fc:	2d00      	cmp	r5, #0
 80049fe:	dd04      	ble.n	8004a0a <__kernel_rem_pio2f+0x16a>
 8004a00:	2d01      	cmp	r5, #1
 8004a02:	d078      	beq.n	8004af6 <__kernel_rem_pio2f+0x256>
 8004a04:	2d02      	cmp	r5, #2
 8004a06:	f000 8081 	beq.w	8004b0c <__kernel_rem_pio2f+0x26c>
 8004a0a:	2f02      	cmp	r7, #2
 8004a0c:	d12f      	bne.n	8004a6e <__kernel_rem_pio2f+0x1ce>
 8004a0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a12:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004a16:	b353      	cbz	r3, 8004a6e <__kernel_rem_pio2f+0x1ce>
 8004a18:	4628      	mov	r0, r5
 8004a1a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004a1e:	f000 fa47 	bl	8004eb0 <scalbnf>
 8004a22:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8004a26:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004a2a:	e020      	b.n	8004a6e <__kernel_rem_pio2f+0x1ce>
 8004a2c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004a30:	3f01      	subs	r7, #1
 8004a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a3a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004a3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004a42:	ecac 0a01 	vstmia	ip!, {s0}
 8004a46:	ed90 0a00 	vldr	s0, [r0]
 8004a4a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004a4e:	e799      	b.n	8004984 <__kernel_rem_pio2f+0xe4>
 8004a50:	d105      	bne.n	8004a5e <__kernel_rem_pio2f+0x1be>
 8004a52:	1e70      	subs	r0, r6, #1
 8004a54:	ab08      	add	r3, sp, #32
 8004a56:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8004a5a:	11ff      	asrs	r7, r7, #7
 8004a5c:	e7c5      	b.n	80049ea <__kernel_rem_pio2f+0x14a>
 8004a5e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004a62:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6a:	da31      	bge.n	8004ad0 <__kernel_rem_pio2f+0x230>
 8004a6c:	2700      	movs	r7, #0
 8004a6e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a76:	f040 809b 	bne.w	8004bb0 <__kernel_rem_pio2f+0x310>
 8004a7a:	1e74      	subs	r4, r6, #1
 8004a7c:	46a4      	mov	ip, r4
 8004a7e:	2000      	movs	r0, #0
 8004a80:	45d4      	cmp	ip, sl
 8004a82:	da4a      	bge.n	8004b1a <__kernel_rem_pio2f+0x27a>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d07a      	beq.n	8004b7e <__kernel_rem_pio2f+0x2de>
 8004a88:	ab08      	add	r3, sp, #32
 8004a8a:	3d08      	subs	r5, #8
 8004a8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8081 	beq.w	8004b98 <__kernel_rem_pio2f+0x2f8>
 8004a96:	4628      	mov	r0, r5
 8004a98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a9c:	00a5      	lsls	r5, r4, #2
 8004a9e:	f000 fa07 	bl	8004eb0 <scalbnf>
 8004aa2:	aa44      	add	r2, sp, #272	; 0x110
 8004aa4:	1d2b      	adds	r3, r5, #4
 8004aa6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004ba8 <__kernel_rem_pio2f+0x308>
 8004aaa:	18d1      	adds	r1, r2, r3
 8004aac:	4622      	mov	r2, r4
 8004aae:	2a00      	cmp	r2, #0
 8004ab0:	f280 80ae 	bge.w	8004c10 <__kernel_rem_pio2f+0x370>
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	f2c0 80cc 	blt.w	8004c54 <__kernel_rem_pio2f+0x3b4>
 8004abc:	a944      	add	r1, sp, #272	; 0x110
 8004abe:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004ac2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8004ba0 <__kernel_rem_pio2f+0x300>
 8004ac6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004bac <__kernel_rem_pio2f+0x30c>
 8004aca:	2000      	movs	r0, #0
 8004acc:	1aa1      	subs	r1, r4, r2
 8004ace:	e0b6      	b.n	8004c3e <__kernel_rem_pio2f+0x39e>
 8004ad0:	2702      	movs	r7, #2
 8004ad2:	e78c      	b.n	80049ee <__kernel_rem_pio2f+0x14e>
 8004ad4:	6820      	ldr	r0, [r4, #0]
 8004ad6:	b94b      	cbnz	r3, 8004aec <__kernel_rem_pio2f+0x24c>
 8004ad8:	b118      	cbz	r0, 8004ae2 <__kernel_rem_pio2f+0x242>
 8004ada:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004ade:	6020      	str	r0, [r4, #0]
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f10e 0e01 	add.w	lr, lr, #1
 8004ae6:	3404      	adds	r4, #4
 8004ae8:	4603      	mov	r3, r0
 8004aea:	e785      	b.n	80049f8 <__kernel_rem_pio2f+0x158>
 8004aec:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004af0:	6020      	str	r0, [r4, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	e7f5      	b.n	8004ae2 <__kernel_rem_pio2f+0x242>
 8004af6:	1e74      	subs	r4, r6, #1
 8004af8:	a808      	add	r0, sp, #32
 8004afa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004afe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004b02:	f10d 0c20 	add.w	ip, sp, #32
 8004b06:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8004b0a:	e77e      	b.n	8004a0a <__kernel_rem_pio2f+0x16a>
 8004b0c:	1e74      	subs	r4, r6, #1
 8004b0e:	a808      	add	r0, sp, #32
 8004b10:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004b14:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8004b18:	e7f3      	b.n	8004b02 <__kernel_rem_pio2f+0x262>
 8004b1a:	ab08      	add	r3, sp, #32
 8004b1c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004b20:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004b24:	4318      	orrs	r0, r3
 8004b26:	e7ab      	b.n	8004a80 <__kernel_rem_pio2f+0x1e0>
 8004b28:	f10c 0c01 	add.w	ip, ip, #1
 8004b2c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004b30:	2c00      	cmp	r4, #0
 8004b32:	d0f9      	beq.n	8004b28 <__kernel_rem_pio2f+0x288>
 8004b34:	9b05      	ldr	r3, [sp, #20]
 8004b36:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004b3a:	eb0d 0003 	add.w	r0, sp, r3
 8004b3e:	9b01      	ldr	r3, [sp, #4]
 8004b40:	18f4      	adds	r4, r6, r3
 8004b42:	ab1c      	add	r3, sp, #112	; 0x70
 8004b44:	1c77      	adds	r7, r6, #1
 8004b46:	384c      	subs	r0, #76	; 0x4c
 8004b48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004b4c:	4466      	add	r6, ip
 8004b4e:	42be      	cmp	r6, r7
 8004b50:	f6ff af0b 	blt.w	800496a <__kernel_rem_pio2f+0xca>
 8004b54:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8004b58:	f8dd e008 	ldr.w	lr, [sp, #8]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b64:	f04f 0c00 	mov.w	ip, #0
 8004b68:	ece4 7a01 	vstmia	r4!, {s15}
 8004b6c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8004bac <__kernel_rem_pio2f+0x30c>
 8004b70:	46a1      	mov	r9, r4
 8004b72:	458c      	cmp	ip, r1
 8004b74:	dd07      	ble.n	8004b86 <__kernel_rem_pio2f+0x2e6>
 8004b76:	ece0 7a01 	vstmia	r0!, {s15}
 8004b7a:	3701      	adds	r7, #1
 8004b7c:	e7e7      	b.n	8004b4e <__kernel_rem_pio2f+0x2ae>
 8004b7e:	9804      	ldr	r0, [sp, #16]
 8004b80:	f04f 0c01 	mov.w	ip, #1
 8004b84:	e7d2      	b.n	8004b2c <__kernel_rem_pio2f+0x28c>
 8004b86:	ecfe 6a01 	vldmia	lr!, {s13}
 8004b8a:	ed39 7a01 	vldmdb	r9!, {s14}
 8004b8e:	f10c 0c01 	add.w	ip, ip, #1
 8004b92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b96:	e7ec      	b.n	8004b72 <__kernel_rem_pio2f+0x2d2>
 8004b98:	3c01      	subs	r4, #1
 8004b9a:	e775      	b.n	8004a88 <__kernel_rem_pio2f+0x1e8>
 8004b9c:	08005380 	.word	0x08005380
 8004ba0:	08005354 	.word	0x08005354
 8004ba4:	43800000 	.word	0x43800000
 8004ba8:	3b800000 	.word	0x3b800000
 8004bac:	00000000 	.word	0x00000000
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8004bb6:	1a98      	subs	r0, r3, r2
 8004bb8:	f000 f97a 	bl	8004eb0 <scalbnf>
 8004bbc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8004ba4 <__kernel_rem_pio2f+0x304>
 8004bc0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc8:	db19      	blt.n	8004bfe <__kernel_rem_pio2f+0x35e>
 8004bca:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8004ba8 <__kernel_rem_pio2f+0x308>
 8004bce:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004bd2:	aa08      	add	r2, sp, #32
 8004bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bd8:	1c74      	adds	r4, r6, #1
 8004bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bde:	3508      	adds	r5, #8
 8004be0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004be8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004bec:	ee10 3a10 	vmov	r3, s0
 8004bf0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004bf4:	ee17 3a90 	vmov	r3, s15
 8004bf8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004bfc:	e74b      	b.n	8004a96 <__kernel_rem_pio2f+0x1f6>
 8004bfe:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004c02:	aa08      	add	r2, sp, #32
 8004c04:	ee10 3a10 	vmov	r3, s0
 8004c08:	4634      	mov	r4, r6
 8004c0a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004c0e:	e742      	b.n	8004a96 <__kernel_rem_pio2f+0x1f6>
 8004c10:	a808      	add	r0, sp, #32
 8004c12:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8004c16:	9001      	str	r0, [sp, #4]
 8004c18:	ee07 0a90 	vmov	s15, r0
 8004c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c20:	3a01      	subs	r2, #1
 8004c22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004c26:	ee20 0a07 	vmul.f32	s0, s0, s14
 8004c2a:	ed61 7a01 	vstmdb	r1!, {s15}
 8004c2e:	e73e      	b.n	8004aae <__kernel_rem_pio2f+0x20e>
 8004c30:	ecfc 6a01 	vldmia	ip!, {s13}
 8004c34:	ecb6 7a01 	vldmia	r6!, {s14}
 8004c38:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004c3c:	3001      	adds	r0, #1
 8004c3e:	4550      	cmp	r0, sl
 8004c40:	dc01      	bgt.n	8004c46 <__kernel_rem_pio2f+0x3a6>
 8004c42:	4288      	cmp	r0, r1
 8004c44:	ddf4      	ble.n	8004c30 <__kernel_rem_pio2f+0x390>
 8004c46:	a858      	add	r0, sp, #352	; 0x160
 8004c48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004c4c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004c50:	3a01      	subs	r2, #1
 8004c52:	e730      	b.n	8004ab6 <__kernel_rem_pio2f+0x216>
 8004c54:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8004c56:	2a02      	cmp	r2, #2
 8004c58:	dc09      	bgt.n	8004c6e <__kernel_rem_pio2f+0x3ce>
 8004c5a:	2a00      	cmp	r2, #0
 8004c5c:	dc2a      	bgt.n	8004cb4 <__kernel_rem_pio2f+0x414>
 8004c5e:	d043      	beq.n	8004ce8 <__kernel_rem_pio2f+0x448>
 8004c60:	f009 0007 	and.w	r0, r9, #7
 8004c64:	b059      	add	sp, #356	; 0x164
 8004c66:	ecbd 8b04 	vpop	{d8-d9}
 8004c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c6e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d1f5      	bne.n	8004c60 <__kernel_rem_pio2f+0x3c0>
 8004c74:	ab30      	add	r3, sp, #192	; 0xc0
 8004c76:	442b      	add	r3, r5
 8004c78:	461a      	mov	r2, r3
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	f1a1 0104 	sub.w	r1, r1, #4
 8004c84:	dc51      	bgt.n	8004d2a <__kernel_rem_pio2f+0x48a>
 8004c86:	4621      	mov	r1, r4
 8004c88:	2901      	cmp	r1, #1
 8004c8a:	f1a2 0204 	sub.w	r2, r2, #4
 8004c8e:	dc5c      	bgt.n	8004d4a <__kernel_rem_pio2f+0x4aa>
 8004c90:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8004bac <__kernel_rem_pio2f+0x30c>
 8004c94:	3304      	adds	r3, #4
 8004c96:	2c01      	cmp	r4, #1
 8004c98:	dc67      	bgt.n	8004d6a <__kernel_rem_pio2f+0x4ca>
 8004c9a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8004c9e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8004ca2:	2f00      	cmp	r7, #0
 8004ca4:	d167      	bne.n	8004d76 <__kernel_rem_pio2f+0x4d6>
 8004ca6:	edc8 6a00 	vstr	s13, [r8]
 8004caa:	ed88 7a01 	vstr	s14, [r8, #4]
 8004cae:	edc8 7a02 	vstr	s15, [r8, #8]
 8004cb2:	e7d5      	b.n	8004c60 <__kernel_rem_pio2f+0x3c0>
 8004cb4:	aa30      	add	r2, sp, #192	; 0xc0
 8004cb6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8004bac <__kernel_rem_pio2f+0x30c>
 8004cba:	4413      	add	r3, r2
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	da24      	bge.n	8004d0c <__kernel_rem_pio2f+0x46c>
 8004cc2:	b34f      	cbz	r7, 8004d18 <__kernel_rem_pio2f+0x478>
 8004cc4:	eef1 7a47 	vneg.f32	s15, s14
 8004cc8:	edc8 7a00 	vstr	s15, [r8]
 8004ccc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004cd4:	aa31      	add	r2, sp, #196	; 0xc4
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	da20      	bge.n	8004d1e <__kernel_rem_pio2f+0x47e>
 8004cdc:	b10f      	cbz	r7, 8004ce2 <__kernel_rem_pio2f+0x442>
 8004cde:	eef1 7a67 	vneg.f32	s15, s15
 8004ce2:	edc8 7a01 	vstr	s15, [r8, #4]
 8004ce6:	e7bb      	b.n	8004c60 <__kernel_rem_pio2f+0x3c0>
 8004ce8:	aa30      	add	r2, sp, #192	; 0xc0
 8004cea:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8004bac <__kernel_rem_pio2f+0x30c>
 8004cee:	4413      	add	r3, r2
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	da05      	bge.n	8004d00 <__kernel_rem_pio2f+0x460>
 8004cf4:	b10f      	cbz	r7, 8004cfa <__kernel_rem_pio2f+0x45a>
 8004cf6:	eef1 7a67 	vneg.f32	s15, s15
 8004cfa:	edc8 7a00 	vstr	s15, [r8]
 8004cfe:	e7af      	b.n	8004c60 <__kernel_rem_pio2f+0x3c0>
 8004d00:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d04:	3c01      	subs	r4, #1
 8004d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d0a:	e7f1      	b.n	8004cf0 <__kernel_rem_pio2f+0x450>
 8004d0c:	ed73 7a01 	vldmdb	r3!, {s15}
 8004d10:	3a01      	subs	r2, #1
 8004d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d16:	e7d2      	b.n	8004cbe <__kernel_rem_pio2f+0x41e>
 8004d18:	eef0 7a47 	vmov.f32	s15, s14
 8004d1c:	e7d4      	b.n	8004cc8 <__kernel_rem_pio2f+0x428>
 8004d1e:	ecb2 7a01 	vldmia	r2!, {s14}
 8004d22:	3301      	adds	r3, #1
 8004d24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d28:	e7d6      	b.n	8004cd8 <__kernel_rem_pio2f+0x438>
 8004d2a:	edd1 7a00 	vldr	s15, [r1]
 8004d2e:	edd1 6a01 	vldr	s13, [r1, #4]
 8004d32:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d36:	3801      	subs	r0, #1
 8004d38:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d3c:	ed81 7a00 	vstr	s14, [r1]
 8004d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d44:	edc1 7a01 	vstr	s15, [r1, #4]
 8004d48:	e799      	b.n	8004c7e <__kernel_rem_pio2f+0x3de>
 8004d4a:	edd2 7a00 	vldr	s15, [r2]
 8004d4e:	edd2 6a01 	vldr	s13, [r2, #4]
 8004d52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8004d56:	3901      	subs	r1, #1
 8004d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d5c:	ed82 7a00 	vstr	s14, [r2]
 8004d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d64:	edc2 7a01 	vstr	s15, [r2, #4]
 8004d68:	e78e      	b.n	8004c88 <__kernel_rem_pio2f+0x3e8>
 8004d6a:	ed33 7a01 	vldmdb	r3!, {s14}
 8004d6e:	3c01      	subs	r4, #1
 8004d70:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d74:	e78f      	b.n	8004c96 <__kernel_rem_pio2f+0x3f6>
 8004d76:	eef1 6a66 	vneg.f32	s13, s13
 8004d7a:	eeb1 7a47 	vneg.f32	s14, s14
 8004d7e:	edc8 6a00 	vstr	s13, [r8]
 8004d82:	ed88 7a01 	vstr	s14, [r8, #4]
 8004d86:	eef1 7a67 	vneg.f32	s15, s15
 8004d8a:	e790      	b.n	8004cae <__kernel_rem_pio2f+0x40e>

08004d8c <__kernel_sinf>:
 8004d8c:	ee10 3a10 	vmov	r3, s0
 8004d90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d94:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004d98:	da04      	bge.n	8004da4 <__kernel_sinf+0x18>
 8004d9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004d9e:	ee17 3a90 	vmov	r3, s15
 8004da2:	b35b      	cbz	r3, 8004dfc <__kernel_sinf+0x70>
 8004da4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004da8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004e00 <__kernel_sinf+0x74>
 8004dac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004e04 <__kernel_sinf+0x78>
 8004db0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004db4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004e08 <__kernel_sinf+0x7c>
 8004db8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004dbc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004e0c <__kernel_sinf+0x80>
 8004dc0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004dc4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004e10 <__kernel_sinf+0x84>
 8004dc8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004dcc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004dd0:	b930      	cbnz	r0, 8004de0 <__kernel_sinf+0x54>
 8004dd2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004e14 <__kernel_sinf+0x88>
 8004dd6:	eea7 6a27 	vfma.f32	s12, s14, s15
 8004dda:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004dde:	4770      	bx	lr
 8004de0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004de4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8004de8:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004dec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004df0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004e18 <__kernel_sinf+0x8c>
 8004df4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8004df8:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	2f2ec9d3 	.word	0x2f2ec9d3
 8004e04:	b2d72f34 	.word	0xb2d72f34
 8004e08:	3638ef1b 	.word	0x3638ef1b
 8004e0c:	b9500d01 	.word	0xb9500d01
 8004e10:	3c088889 	.word	0x3c088889
 8004e14:	be2aaaab 	.word	0xbe2aaaab
 8004e18:	3e2aaaab 	.word	0x3e2aaaab

08004e1c <fabsf>:
 8004e1c:	ee10 3a10 	vmov	r3, s0
 8004e20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e24:	ee00 3a10 	vmov	s0, r3
 8004e28:	4770      	bx	lr
	...

08004e2c <floorf>:
 8004e2c:	ee10 3a10 	vmov	r3, s0
 8004e30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e34:	3a7f      	subs	r2, #127	; 0x7f
 8004e36:	2a16      	cmp	r2, #22
 8004e38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e3c:	dc2a      	bgt.n	8004e94 <floorf+0x68>
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	da11      	bge.n	8004e66 <floorf+0x3a>
 8004e42:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004ea4 <floorf+0x78>
 8004e46:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e52:	dd05      	ble.n	8004e60 <floorf+0x34>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da23      	bge.n	8004ea0 <floorf+0x74>
 8004e58:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <floorf+0x7c>)
 8004e5a:	2900      	cmp	r1, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	4613      	movne	r3, r2
 8004e60:	ee00 3a10 	vmov	s0, r3
 8004e64:	4770      	bx	lr
 8004e66:	4911      	ldr	r1, [pc, #68]	; (8004eac <floorf+0x80>)
 8004e68:	4111      	asrs	r1, r2
 8004e6a:	420b      	tst	r3, r1
 8004e6c:	d0fa      	beq.n	8004e64 <floorf+0x38>
 8004e6e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8004ea4 <floorf+0x78>
 8004e72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004e76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	ddef      	ble.n	8004e60 <floorf+0x34>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bfbe      	ittt	lt
 8004e84:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8004e88:	fa40 f202 	asrlt.w	r2, r0, r2
 8004e8c:	189b      	addlt	r3, r3, r2
 8004e8e:	ea23 0301 	bic.w	r3, r3, r1
 8004e92:	e7e5      	b.n	8004e60 <floorf+0x34>
 8004e94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8004e98:	d3e4      	bcc.n	8004e64 <floorf+0x38>
 8004e9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004e9e:	4770      	bx	lr
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e7dd      	b.n	8004e60 <floorf+0x34>
 8004ea4:	7149f2ca 	.word	0x7149f2ca
 8004ea8:	bf800000 	.word	0xbf800000
 8004eac:	007fffff 	.word	0x007fffff

08004eb0 <scalbnf>:
 8004eb0:	ee10 3a10 	vmov	r3, s0
 8004eb4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004eb8:	d025      	beq.n	8004f06 <scalbnf+0x56>
 8004eba:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004ebe:	d302      	bcc.n	8004ec6 <scalbnf+0x16>
 8004ec0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004ec4:	4770      	bx	lr
 8004ec6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004eca:	d122      	bne.n	8004f12 <scalbnf+0x62>
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <scalbnf+0xc8>)
 8004ece:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8004f7c <scalbnf+0xcc>
 8004ed2:	4298      	cmp	r0, r3
 8004ed4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004ed8:	db16      	blt.n	8004f08 <scalbnf+0x58>
 8004eda:	ee10 3a10 	vmov	r3, s0
 8004ede:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004ee2:	3a19      	subs	r2, #25
 8004ee4:	4402      	add	r2, r0
 8004ee6:	2afe      	cmp	r2, #254	; 0xfe
 8004ee8:	dd15      	ble.n	8004f16 <scalbnf+0x66>
 8004eea:	ee10 3a10 	vmov	r3, s0
 8004eee:	eddf 7a24 	vldr	s15, [pc, #144]	; 8004f80 <scalbnf+0xd0>
 8004ef2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8004f84 <scalbnf+0xd4>
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	eeb0 7a67 	vmov.f32	s14, s15
 8004efc:	bfb8      	it	lt
 8004efe:	eef0 7a66 	vmovlt.f32	s15, s13
 8004f02:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004f06:	4770      	bx	lr
 8004f08:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004f88 <scalbnf+0xd8>
 8004f0c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004f10:	4770      	bx	lr
 8004f12:	0dd2      	lsrs	r2, r2, #23
 8004f14:	e7e6      	b.n	8004ee4 <scalbnf+0x34>
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	dd06      	ble.n	8004f28 <scalbnf+0x78>
 8004f1a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f1e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004f22:	ee00 3a10 	vmov	s0, r3
 8004f26:	4770      	bx	lr
 8004f28:	f112 0f16 	cmn.w	r2, #22
 8004f2c:	da1a      	bge.n	8004f64 <scalbnf+0xb4>
 8004f2e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004f32:	4298      	cmp	r0, r3
 8004f34:	ee10 3a10 	vmov	r3, s0
 8004f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3c:	dd0a      	ble.n	8004f54 <scalbnf+0xa4>
 8004f3e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8004f80 <scalbnf+0xd0>
 8004f42:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8004f84 <scalbnf+0xd4>
 8004f46:	eef0 7a40 	vmov.f32	s15, s0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bf18      	it	ne
 8004f4e:	eeb0 0a47 	vmovne.f32	s0, s14
 8004f52:	e7db      	b.n	8004f0c <scalbnf+0x5c>
 8004f54:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8004f88 <scalbnf+0xd8>
 8004f58:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8004f8c <scalbnf+0xdc>
 8004f5c:	eef0 7a40 	vmov.f32	s15, s0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	e7f3      	b.n	8004f4c <scalbnf+0x9c>
 8004f64:	3219      	adds	r2, #25
 8004f66:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004f6a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004f6e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004f90 <scalbnf+0xe0>
 8004f72:	ee07 3a10 	vmov	s14, r3
 8004f76:	e7c4      	b.n	8004f02 <scalbnf+0x52>
 8004f78:	ffff3cb0 	.word	0xffff3cb0
 8004f7c:	4c000000 	.word	0x4c000000
 8004f80:	7149f2ca 	.word	0x7149f2ca
 8004f84:	f149f2ca 	.word	0xf149f2ca
 8004f88:	0da24260 	.word	0x0da24260
 8004f8c:	8da24260 	.word	0x8da24260
 8004f90:	33000000 	.word	0x33000000

08004f94 <_init>:
 8004f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f96:	bf00      	nop
 8004f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f9a:	bc08      	pop	{r3}
 8004f9c:	469e      	mov	lr, r3
 8004f9e:	4770      	bx	lr

08004fa0 <_fini>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr
